{
	"info": {
		"_postman_id": "dceacf1d-ab06-4cdb-a217-9956d295e6ab",
		"name": "FIWARE Querying Time Series Data (Crate-DB)",
		"description": "This tutorial is an introduction to [FIWARE Quantum Leap](https://smartsdk.github.io/ngsi-timeseries-api/) - a generic enabler which is used to retrieve trend data from a **Crate-DB** database. The tutorial activates the IoT sensors connected in the [previous tutorial](https://github.com/Fiware/tutorials.IoT-Agent) and persists measurements from those sensors into a database and retrieves time-based aggregations of that data.\n\nThe tutorial uses [cUrl](https://ec.haxx.se/) commands throughout, but is also available as [Postman documentation](http://fiware.github.io/tutorials.Short-Term-History/)\n\nThe `docker-compose` files for this tutorial can be found on GitHub: \n\n![GitHub](https://fiware.github.io/tutorials.Time-Series-Data/icon/GitHub-Mark-32px.png) [FIWARE 303: Time-Series Data](https://github.com/Fiware/tutorials.Time-Series-Data)\n\n# Querying Time Series Data (Crate-DB)\n\n> \"Forever is composed of nows.\"\n>\n> â€” Emily Dickinson\n\n[Previous tutorials](https://github.com/Fiware/tutorials.Historic-Context) have shown how to persist historic \ncontext data into a range of databases such as **MySQL** and **PostgreSQL**. Furthermore, the [Short Term Historic](https://github.com/Fiware/tutorials.Short-Term-History) tutorial has introduced the [STH-Comet](http://fiware-sth-comet.readthedocs.io/) generic enabler for persisting and querying historic context data using\na **Mongo-DB** database.\n\nFIWARE [Quantum Leap](https://smartsdk.github.io/ngsi-timeseries-api/) is an alternative generic enabler created\nspecifically for data persistence into the **Crate-DB** time-series database, and therefore offers an alternative to the\n[STH-Comet](http://fiware-sth-comet.readthedocs.io/). \n\n[Crate-DB](https://crate.io/) is a distributed SQL DBMS designed for use with the Internet of Things. It is capable of ingesting a large number of data points per second and can be queried in real-time. The database is designed for the\nexecution of complex queries such as geospatial and time series data. Retrieval of this historic context data allows \nfor the creation of graphs and dashboards displaying trends over time.\n \n\nA summary of the differences can be seen below:\n\n\n| Quantum Leap               | STH-Comet |\n|----------------------------|-----------|\n| Offers an NGSI v2 interface for notifications | Offers an NGSI v1 interface for notifiations |\n| Persists Data to a Crate-DB database  | Persists Data to Mongo-DB database |\n| Does not offer its own HTTP endpoint for queries, use the Crate-DB SQL endpoint | Offers its own HTTP endpoint for queries - Mongo-DB database cannot be accessed directly |\n| The Crate-DB SQL endpoint is able to satisfy complex data queries using SQL | STH-Comet offers a limited set of queries |\n| Crate-DB is a distributed SQL DBMS built atop NoSQL storage | Mongo-DB is a document based NoSQL database|\n\nFurther details about the differences between the the underlying database engines can be found [here](https://db-engines.com/en/system/CrateDB%3BMongoDB)\n\n\n## Analyzing time series data\n\nThe appropriate use of time series data analysis will depend on your use case and the reliability of the data measurements you receive. Time series data analysis can be used to answer questions such as:\n\n* What was the maximum measurement of a device within a given time period?\n* What was the average measurement of a device within a given time period?\n* What was the sum of the measurements sent by a device within a given time period?\n\nIt can also be used to reduce the significance of each individual data point to exclude outliers by smoothing.\n\n\n#### Grafana\n\n[Grafana](https://grafana.com/) is an open source software for time series analytics tool which will be used \nduring this tutorial. It integrates with a variety of time-series databases including Crate-DB\nIt is available licensed under the Apache License 2.0. More information can be found at https://grafana.com/\n\n\n#### Device Monitor\n\nFor the purpose of this tutorial, a series of dummy IoT devices have been created, which will be attached to the context broker. Details of the architecture and protocol used can be found in the [IoT Sensors tutorial](https://github.com/Fiware/tutorials.IoT-Sensors).\nThe state of each device can be seen on the UltraLight device monitor web-page found at: `http://localhost:3000/device/monitor`\n\n![FIWARE Monitor](https://fiware.github.io/tutorials.Time-Series-Data/img/device-monitor.png)\n\n#### Device History\n\nOnce **Quantum Leap** has started aggregating data, the historical state of each device can be seen on the device history web-page found at: `http://localhost:3000/device/history/urn:ngsi-ld:Store:001`\n\n![](https://fiware.github.io/tutorials.Time-Series-Data/img/history-graphs.png)\n\n\n\n# Architecture\n\nThis application builds on the components and dummy IoT devices created in \n[previous tutorials](https://github.com/Fiware/tutorials.IoT-Agent/). It will use three FIWARE components:\nthe [Orion Context Broker](https://fiware-orion.readthedocs.io/en/latest/), the\n[IoT Agent for Ultralight 2.0](http://fiware-iotagent-ul.readthedocs.io/en/latest/),\nand [Quantum Leap](https://smartsdk.github.io/ngsi-timeseries-api/) . \n\nTherefore the overall architecture will consist of the following elements:\n\n* Thre **FIWARE Generic Enablers**:\n  * The FIWARE [Orion Context Broker](https://fiware-orion.readthedocs.io/en/latest/) which will receive requests using [NGSI](https://fiware.github.io/specifications/OpenAPI/ngsiv2)\n  * The FIWARE [IoT Agent for Ultralight 2.0](http://fiware-iotagent-ul.readthedocs.io/en/latest/) which will receive northbound measurements from the dummy IoT devices in [Ultralight 2.0](http://fiware-iotagent-ul.readthedocs.io/en/latest/usermanual/index.html#user-programmers-manual) format and convert them to [NGSI](https://fiware.github.io/specifications/OpenAPI/ngsiv2) requests for the context broker to alter the state of the context entities\n  * FIWARE [Quantum Leap](https://smartsdk.github.io/ngsi-timeseries-api/) subscribe to context changes and persist them into a **Crate-DB** database  \n* A [MongoDB](https://www.mongodb.com/) database:\n  * Used by the **Orion Context Broker** to hold context data information such as data entities, subscriptions and registrations\n  * Used by the **IoT Agent** to hold device information such as device URLs and Keys\n* A [Crate-DB](https://crate.io/) database:\n  * Used as a data sink to hold time-based historical context data\n  * offers an HTTP endpoint to interpret time-based data queries\n\n* Three **Context Providers**:\n  * The **Stock Management Frontend** is not used in this tutorial. It does the following:\n    + Display store information and allow users to interact with the dummy IoT devices\n    + Show which products can be bought at each store\n    + Allow users to \"buy\" products and reduce the stock count.\n  * A webserver acting as set of [dummy IoT devices](https://github.com/Fiware/tutorials.IoT-Sensors) using the [Ultralight 2.0](http://fiware-iotagent-ul.readthedocs.io/en/latest/usermanual/index.html#user-programmers-manual) protocol running over HTTP.\n  * The **Context Provider NGSI** proxy is not used in this tutorial. It does the following:\n    + receive requests using [NGSI](https://fiware.github.io/specifications/OpenAPI/ngsiv2)\n    + makes requests to publicly available data sources using their own APIs in a proprietary format \n    + returns context data back to the Orion Context Broker in [NGSI](https://fiware.github.io/specifications/OpenAPI/ngsiv2) format.\n\n\nSince all interactions between the elements are initiated by HTTP requests, the entities can be containerized and run from exposed ports. \n\nThe overall architecture can be seen below:\n\n![](https://fiware.github.io/tutorials.Time-Series-Data/img/architecture.png)\n\n\n\n# Prerequisites\n\n## Docker and Docker Compose \n\nTo keep things simple all components will be run using [Docker](https://www.docker.com). **Docker** is a container technology which allows to different components isolated into their respective environments. \n\n* To install Docker on Windows follow the instructions [here](https://docs.docker.com/docker-for-windows/)\n* To install Docker on Mac follow the instructions [here](https://docs.docker.com/docker-for-mac/)\n* To install Docker on Linux follow the instructions [here](https://docs.docker.com/install/)\n\n**Docker Compose** is a tool for defining and running multi-container Docker applications. A  series of [YAML files](https://raw.githubusercontent.com/Fiware/tutorials.Historic-Context/master/cygnus) are used configure the required\nservices for the application. This means all container services can be brought up in a single command. Docker Compose is installed by default as part of Docker for Windows and  Docker for Mac, however Linux users will need to follow the instructions found [here](https://docs.docker.com/compose/install/)\n\n## Cygwin for Windows\n\nWe will start up our services using a simple Bash script. Windows users should download [cygwin](http://www.cygwin.com/) to provide a command line functionality similar to a Linux distribution on Windows.\n\n\n\n\n# Start Up\n\nBefore you start you should ensure that you have obtained or built the necessary Docker images locally. Please clone the repository and create the necessary images by running the commands as shown:\n\n```console\ngit clone git@github.com:Fiware/tutorials.Time-Series-Data.git\ncd tutorials.Time-Series-Data\n\n./services create\n``` \n\n>**Note** The `context-provider` image has not yet been pushed to Docker hub.\n> Failing to build the Docker sources before proceeding will result in the following error:\n>\n>```\n>Pulling context-provider (fiware/cp-web-app:latest)...\n>ERROR: The image for the service you're trying to recreate has been removed.\n>```\n\n\nThereafter, all services can be initialized from the command line by running the [services](https://github.com/Fiware/tutorials.Historic-Context/blob/master/services) Bash script provided within the repository:\n\n```console\n./services start\n``` \n\n>**Note:** If you want to clean up and start over again you can do so with the following command:\n>\n>```console\n>./services stop\n>``` \n>\n\n\n# Connecting FIWARE to a Crate-DB Database via Quantum Leap\n\nIn the configuration, **Quantum Leap** listens to NGSI v2 notifications on port `8868` and persists historic context\ndata to the Crate-DB. Crate-DB is accessible using port `4200` and can either be queried directly or attached to the\nGrafana analytics tool.  The rest of the system providing the context data has been described in previous tutorials\n\n\nThe overall architecture can be seen below:\n\n![](https://fiware.github.io/tutorials.Time-Series-Data/img/architecture.png)\n\n## Crate-DB Database Server Configuration\n\n```yaml\n  crate-db:\n    image: crate:1.0.5\n    hostname: crate-db\n    ports:\n      - \"4200:4200\"\n      - \"4300:4300\"\n    command: -Ccluster.name=democluster -Chttp.cors.enabled=true -Chttp.cors.allow-origin=\"*\"\n```\n\n## Quantum Leap Configuration \n\n```yaml\n  quantum-leap:\n    image: smartsdk/quantumleap\n    hostname: quantum-leap\n    ports:\n      - \"8668:8668\"\n    depends_on:\n      - crate-db\n    environment:\n      - CRATE_HOST=crate-db\n```\n\n## Grafana Configuration\n\n```yaml\n  grafana:\n    image: grafana/grafana\n    depends_on:\n      - crate-db\n    ports:\n      - \"3003:3000\"\n    environment:\n      - GF_INSTALL_PLUGINS=crate-datasource,grafana-clock-panel,grafana-worldmap-panel\n```\n\nThe `quantum-leap` container is listening on one port: \n\n* The Operations for port for STH-Comet - `8668` is where the service will be listening for notifications from the Orion context broker\n\nThe `CRATE_HOST` environment variable defines the location where the data will be persisted.\n\nThe `crate-db` container is listening on two ports: \n* The Admin UI is avaliable on port `4200`\n* The transport protocol is available on `4300`\n\nThe `grafana` container has connected up port `3000` internally with port `3003` externally. This is because the Grafana \nUI is usually available on port `3000`, but this port has already been taken by the dummy devices UI so it has been shifted\nto another port. The Grafana Environment variables are described within their own \n[documentation](http://docs.grafana.org/installation/configuration/). The configuration ensures we will be able to connect\nto the Crate-DB database later on in the tutorial\n\n\n\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setting up Subscriptions",
			"description": "Once a dynamic context system is up and running, we need to inform **Quantum Leap** directly\nof changes in context. As expected this is done using the subscription mechanism of the **Orion Context Broker**. The `attrsFormat=legacy` is not required since **Quantum Leap** accepts NGSI v2 notifications directly. \n\nMore details about subscriptions can be found in a [previous tutorials](https://github.com/Fiware/tutorials.Subscriptions)",
			"item": [
				{
					"name": "Orion - Quantum-Leap - Sample Lamp Luminosity",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Notify Quantum Leap to sample Lamp changes every five seconds\",\n  \"subject\": {\n    \"entities\": [\n      {\n        \"idPattern\": \"Lamp.*\"\n      }\n    ],\n    \"condition\": {\n      \"attrs\": [\n        \"luminosity\"\n      ]\n    }\n  },\n  \"notification\": {\n    \"http\": {\n      \"url\": \"http://quantum-leap:8668/v2/notify\"\n    },\n    \"attrs\": [\n      \"luminosity\"\n    ],\n    \"metadata\": [\"dateCreated\", \"dateModified\"]\n  },\n  \"throttling\": 5\n}"
						},
						"url": {
							"raw": "http://{{orion}}/v2/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"subscriptions",
								""
							]
						},
						"description": "The luminosity of the **Smart Lamp** is constantly changing, we only need to **sample** the values to be\nable to work out relevant statistics such as minimum and maximum values and rates of change.\n\nThis is done by making a POST request to the `/v2/subscription` endpoint of the Orion Context Broker\nand including the `throttling` attribute in the request body.\n\n* The `fiware-service` and `fiware-servicepath` headers are used to filter the subscription to only listen to measurements from the attached IoT Sensors\n* The `idPattern` in the request body ensures that **Quantum Leap** will be informed of all **Smart Lamp** data changes only\n* The notification `url` must match the configured `STH_PORT`\n* The `throttling` value defines the rate that changes are sampled.\n* \n\nThe `metadata` attribute ensures that the `time_index` column within the Crate-DB database will match the data found within the **Orion Context Broker** rather than using the creation time of the record within the Crate-DB itself."
					},
					"response": []
				},
				{
					"name": "Orion - Quantum-Leap - Aggregate Motion Sensor Count Events",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Notify Quantum Leap of all Motion Sensor count changes\",\n  \"subject\": {\n    \"entities\": [\n      {\n        \"idPattern\": \"Motion.*\"\n      }\n    ],\n    \"condition\": {\n      \"attrs\": [\n        \"count\"\n      ]\n    }\n  },\n  \"notification\": {\n    \"http\": {\n      \"url\": \"http://quantum-leap:8668/v2/notify\"\n    },\n    \"attrs\": [\n      \"count\"\n    ],\n    \"metadata\": [\"dateCreated\", \"dateModified\"]\n  }\n}"
						},
						"url": {
							"raw": "http://{{orion}}/v2/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"subscriptions",
								""
							]
						},
						"description": "The rate of change of the **Motion Sensor** is driven by events in the real-world. We need to receive\nevery event to be able to aggregate the results.\n\nThis is done by making a POST request to the `/v2/subscription` endpoint of the Orion Context Broker.\n\n* The `fiware-service` and `fiware-servicepath` headers are used to filter the subscription to only listen to measurements from the attached IoT Sensors\n* The `idPattern` in the request body ensures that **Quantum Leap** will be informed of all **Motion Sensor** data changes.\n* The notification `url` must match the exposed port.\n\nThe `metadata` attribute ensures that the `time_index` column within the Crate-DB database will match the data found within the **Orion Context Broker** rather than using the creation time of the record within the Crate-DB itself."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0ea31757-bc61-4572-84e0-9e15b337dcae",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "11352768-823c-4114-a385-7058433368ce",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Time Series Data Queries (Crate-DB)",
			"description": "**Crate-DB** offers an [HTTP Endpoint](https://crate.io/docs/crate/reference/en/latest/interfaces/http.html) that can be used to submit SQL queries. The endpoint is accessible under `<servername:port>/_sql`.\n\nSQL statements are sent as the body of POST requests in JSON format, where the SQL statement is the value of the `stmt` attribute.\n",
			"item": [
				{
					"name": "Read Schemas",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"stmt\":\"SELECT * FROM mtopeniot.etmotion WHERE entity_id = 'Motion:001' LIMIT 10\"}"
						},
						"url": {
							"raw": "http://{{crate}}/_sql",
							"protocol": "http",
							"host": [
								"{{crate}}"
							],
							"path": [
								"_sql"
							]
						},
						"description": "**Qunatum Leap** does not currently offer any interfaces to query for the persisted data\nA good method to see if data is being persisted is to check to see if a `table_schema` has been created.\nThis can be done by making a request to the Crate-DB HTTP endpoint as shown:\n\nSchema names are formed with the `mt` prefix followed by `fiware-service` header in lower case.\nThe **IoT Agent** is forwarding measurements from the dummy IoT devices, with the header `openiot` these are being persisted under the `mtopeniot` schema.\n\nIf the `mtopeniot` does not exist, then the subscription to **Quantum Leap** has not been set up correctly. Check that the subscription exists, and has been configured to send data to the correct location."
					},
					"response": []
				},
				{
					"name": "Read Tables",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"stmt\":\"SELECT * FROM mtopeniot.etmotion WHERE entity_id = 'Motion:001' LIMIT 10\"}"
						},
						"url": {
							"raw": "http://{{crate}}/_sql",
							"protocol": "http",
							"host": [
								"{{crate}}"
							],
							"path": [
								"_sql"
							]
						},
						"description": "**Quantum Leap** will persist data into separate tables within the Crate-DB database based on the entity type. Table names are formed with the `et` prefix and the entity type name in lowercase.\n\nThe response shows that both **Motion Sensor** data and **Smart Lamp** data are being persisted in the database."
					},
					"response": []
				},
				{
					"name": "List the first N Sampled Values",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"stmt\":\"SELECT * FROM mtopeniot.etlamp WHERE entity_id = 'Lamp:001'  ORDER BY time_index ASC LIMIT 3\"}"
						},
						"url": {
							"raw": "http://{{crate}}/_sql",
							"protocol": "http",
							"host": [
								"{{crate}}"
							],
							"path": [
								"_sql"
							]
						},
						"description": "This example shows the first 3 sampled `luminosity` values from `Lamp:001`. \n\nThe SQL statement uses `ORDER BY` and `LIMIT` clauses to sort the data. More details can be found under within the Crate-DB [documentation](https://crate.io/docs/crate/reference/en/latest/sql/statements/select.html)"
					},
					"response": []
				},
				{
					"name": "List N Sampled Values at an Offset",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"stmt\":\"SELECT * FROM mtopeniot.etmotion WHERE entity_id = 'Motion:001' LIMIT 10\"}"
						},
						"url": {
							"raw": "http://{{crate}}/_sql",
							"protocol": "http",
							"host": [
								"{{crate}}"
							],
							"path": [
								"_sql"
							]
						},
						"description": "This example shows the fourth, fifth and sixth sampled count values from Motion:001.\n\nThe SQL statement uses an `OFFSET` clause to retrieve the required rows. \nMore details can be found under within the Crate-DB [documentation](https://crate.io/docs/crate/reference/en/latest/sql/statements/select.html)"
					},
					"response": []
				},
				{
					"name": "List the latest N Sampled Values",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"stmt\":\"SELECT * FROM mtopeniot.motion WHERE entity_id = 'Motion:001'  ORDER BY time_index DESC LIMIT 3\"}"
						},
						"url": {
							"raw": "http://{{crate}}/_sql",
							"protocol": "http",
							"host": [
								"{{crate}}"
							],
							"path": [
								"_sql"
							]
						},
						"description": "This example shows latest three sampled `count` values from `Motion:001`. \n\nThe SQL statement uses an `ORDER BY ... DESC` clause combined with a `LIMIT` clause to retrieve \nthe last N rows. More details can be found under within the Crate-DB [documentation](https://crate.io/docs/crate/reference/en/latest/sql/statements/select.html)"
					},
					"response": []
				},
				{
					"name": "List the Sum of values over a time period",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"stmt\":\"SELECT DATE_FORMAT (DATE_TRUNC ('minute', time_index)) AS minute, SUM (count) AS sum FROM mtopeniot.etmotion WHERE entity_id = 'Motion:001' GROUP BY minute\"}"
						},
						"url": {
							"raw": "http://{{crate}}/_sql",
							"protocol": "http",
							"host": [
								"{{crate}}"
							],
							"path": [
								"_sql"
							]
						},
						"description": "This example shows total `count` values from `Motion:001` over each minute.\n\nThe SQL statement uses a `SUM` function and `GROUP BY` clause to retrieve the relevant data.\nCrate-DB offers a range of [Date-Time Function](https://crate.io/docs/crate/reference/en/latest/general/builtins/scalar.html#date-and-time-functions) to truncate and convert the timestamps into data which can be grouped."
					},
					"response": []
				},
				{
					"name": "List the Minimum Values over a Time Period",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"stmt\":\"SELECT DATE_FORMAT (DATE_TRUNC ('minute', time_index)) AS minute, MIN (luminosity) AS min FROM mtopeniot.etlamp WHERE entity_id = 'Lamp:001' GROUP BY minute\"}"
						},
						"url": {
							"raw": "http://{{crate}}/_sql",
							"protocol": "http",
							"host": [
								"{{crate}}"
							],
							"path": [
								"_sql"
							]
						},
						"description": "This example shows minimum `luminosity` values from `Lamp:001` over each minute.\n\nThe SQL statement uses a `MIN` function and `GROUP BY` clause to retrieve the relevant data.\nCrate-DB offers a range of [Date-Time Function](https://crate.io/docs/crate/reference/en/latest/general/builtins/scalar.html#date-and-time-functions) to truncate and convert the timestamps into data which can be grouped."
					},
					"response": []
				},
				{
					"name": "List the Maximum Values over a Time Period",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"stmt\":\"SELECT DATE_FORMAT (DATE_TRUNC ('minute', time_index)) AS minute, MAX (luminosity) AS max FROM mtopeniot.etlamp WHERE entity_id = 'Lamp:001' GROUP BY minute\"}"
						},
						"url": {
							"raw": "http://{{crate}}/_sql",
							"protocol": "http",
							"host": [
								"{{crate}}"
							],
							"path": [
								"_sql"
							]
						},
						"description": "This example shows maximum `luminosity` values from `Lamp:001` over each minute.\n\nThe SQL statement uses a `MAX` function and `GROUP BY` clause to retrieve the relevant data.\nCrate-DB offers a range of [Date-Time Function](https://crate.io/docs/crate/reference/en/latest/general/builtins/scalar.html#date-and-time-functions) to truncate and convert the timestamps into data which can be grouped."
					},
					"response": []
				},
				{
					"name": "List the Average Values over a Time Period",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"stmt\":\"SELECT DATE_FORMAT (DATE_TRUNC ('minute', time_index)) AS minute, AVG (luminosity) AS average FROM mtopeniot.etlamp WHERE entity_id = 'Lamp:001' GROUP BY minute\"}"
						},
						"url": {
							"raw": "http://{{crate}}/_sql",
							"protocol": "http",
							"host": [
								"{{crate}}"
							],
							"path": [
								"_sql"
							]
						},
						"description": "This example shows the average of `luminosity` values from `Lamp:001` over each minute.\n\nThe SQL statement uses a `AVG` function and `GROUP BY` clause to retrieve the relevant data.\nCrate-DB offers a range of [Date-Time Function](https://crate.io/docs/crate/reference/en/latest/general/builtins/scalar.html#date-and-time-functions) to truncate and convert the timestamps into data which can be grouped."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d9f95699-2277-4b49-a5fb-a4d830c96eaf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "abacb9de-37b5-4464-bfe7-25f784aa1a9a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "d1cff9ac-8932-417c-b6e2-582ba712ff79",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "cc3f098c-a786-4112-a15e-b1c8c83cc657",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "0c6d5a70-6761-4e90-94d7-0afd0f0c3768",
			"key": "orion",
			"value": "localhost:1026",
			"type": "string",
			"description": ""
		},
		{
			"id": "8d02af2f-f88b-42d9-9166-2bbb3b09c564",
			"key": "quantum-leap",
			"value": "localhost:8668",
			"type": "string",
			"description": ""
		},
		{
			"id": "3ea2f4e0-3e29-41ac-ab55-d6363cceecca",
			"key": "crate",
			"value": "localhost:4200",
			"type": "string",
			"description": ""
		}
	]
}