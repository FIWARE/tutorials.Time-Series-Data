# WARNING: Do not deploy this tutorial configuration directly to a production environment
#
# The tutorial docker-compose files have not been written for production deployment and will not 
# scale. A proper architecture has been sacrificed to keep the narrative focused on the learning 
# goals, they are just used to deploy everything onto a single Docker machine. All FIWARE components 
# are running at full debug and extra ports have been exposed to allow for direct calls to services. 
# They also contain various obvious security flaws - passwords in plain text, no load balancing,
# no use of HTTPS and so on. 
# 
# This is all to avoid the need of multiple machines, generating certificates, encrypting secrets
# and so on, purely so that a single docker-compose file can be read as an example to build on, 
# not use directly. 
# 
# When deploying to a production environment, please refer to the Helm Repository
# for FIWARE Components in order to scale up to a proper architecture:
# 
# see: https://github.com/FIWARE/helm-charts/
#
version: "3.5"

services:

  zookeeper:
    image: zookeeper
    hostname: zookeeper
    container_name: zookeeper
    networks:
      - default
    ports:
      - "2181"
  kafka:
    image: wurstmeister/kafka
    hostname: kafka
    container_name: kafka
    networks:
      - default
    ports:
      - "9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_PORT: 9092
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
      
  postgres:
    image: mdillon/postgis
    hostname: postgres
    container_name: db-postgres
    networks:
      - default
    ports:
      - "5432"
    environment:
      POSTGRES_USER: ngb
      POSTGRES_PASSWORD: ngb
      POSTGRES_DB: ngb

  scorpio:
    image: scorpiobroker/scorpio:scorpio-aaio_${SCORPIO_VERSION}
    hostname: scorpio
    container_name: fiware-scorpio
    networks:
      - default
    ports:
      - "${SCORPIO_PORT}:9090"
    depends_on:
      - kafka
      - postgres
    #healthcheck:
    #  test: curl --fail -s http://scorpio:${SCORPIO_PORT}/scorpio/v1/info/ || exit 1
    deploy:
      resources:
        limits:
          cpus: '0.8'
          memory: 640M
        reservations:
          cpus: '0.6'
          memory: 480M

  # IoT-Agent connects to the Scorpio Broker
  iot-agent:
    environment:
      - IOTA_DEFAULT_RESOURCE=/iot/d
      - IOTA_CB_HOST=scorpio # name of the context broker to update context
      - IOTA_CB_PORT=${SCORPIO_PORT} # port the context broker listens on to update context

  # Tutorial acts as a series of dummy IoT Sensors over HTTP and connects to the Scorpio Broker
  tutorial:
    environment:
      - IOTA_DEFAULT_RESOURCE=/iot/d
      - DUMMY_DEVICES_PORT=${TUTORIAL_DUMMY_DEVICE_PORT} # Port used by the dummy IOT devices to receive commands
      - DUMMY_DEVICES_TRANSPORT=HTTP # Default transport used by dummy Io devices
      - DUMMY_DEVICES_PAYLOAD=ULTRALIGHT
      - CONTEXT_BROKER=http://scorpio:${SCORPIO_PORT}/ngsi-ld/v1 # URL of the context broker to update context
