# WARNING: Do not deploy this tutorial configuration directly to a production environment
#
# The tutorial docker-compose files have not been written for production deployment and will not 
# scale. A proper architecture has been sacrificed to keep the narrative focused on the learning 
# goals, they are just used to deploy everything onto a single Docker machine. All FIWARE components 
# are running at full debug and extra ports have been exposed to allow for direct calls to services. 
# They also contain various obvious security flaws - passwords in plain text, no load balancing,
# no use of HTTPS and so on. 
# 
# This is all to avoid the need of multiple machines, generating certificates, encrypting secrets
# and so on, purely so that a single docker-compose file can be read as an example to build on, 
# not use directly. 
# 
# When deploying to a production environment, please refer to the Helm Repository
# for FIWARE Components in order to scale up to a proper architecture:
# 
# see: https://github.com/FIWARE/helm-charts/
#
version: "3.8"
services:
  # @context file is served from here
  ld-context:
    labels:
      org.fiware: 'tutorial'
    image: httpd:alpine
    hostname: context
    container_name: fiware-ld-context
    ports:
        - "3004:80"
    volumes:
        - data-models:/usr/local/apache2/htdocs/
    healthcheck:
      test: (wget --server-response --spider --quiet  http://ld-context/ngsi-context.jsonld 2>&1 | awk 'NR==1{print $$2}'|  grep -q -e "200") || exit 1

  # Databases
  mongo-db:
    labels:
      org.fiware: 'tutorial'
    image: mongo:${MONGO_DB_VERSION}
    hostname: mongo-db
    container_name: db-mongo
    expose:
      - "${MONGO_DB_PORT}"
    ports:
      - "${MONGO_DB_PORT}:${MONGO_DB_PORT}" # localhost:27017
    networks:
      - default
    volumes:
      - mongo-db:/data/db
      - mongo-config:/data/configdb
    healthcheck:
      test: |
        host=`hostname --ip-address || echo '127.0.0.1'`; 
        mongo --quiet $host/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1    
      interval: 5s

  # IoT-Agent is configured for the UltraLight Protocol
  iot-agent:
    labels:
      org.fiware: 'tutorial'
    image: fiware/iotagent-ul:${ULTRALIGHT_VERSION}
    hostname: iot-agent
    container_name: fiware-iot-agent
    depends_on:
      - mongo-db
      - ld-context
    networks:
      - default
    ports:
      - "${IOTA_NORTH_PORT}:${IOTA_NORTH_PORT}" # localhost:4041
      - "${IOTA_SOUTH_PORT}:${IOTA_SOUTH_PORT}" # localhost:7896
    environment:
      - IOTA_NORTH_PORT=${IOTA_NORTH_PORT}
      - IOTA_REGISTRY_TYPE=mongodb #Whether to hold IoT device info in memory or in a database
      - IOTA_LOG_LEVEL=DEBUG # The log level of the IoT Agent
      - IOTA_TIMESTAMP=true # Supply timestamp information with each measurement
      - IOTA_AUTOCAST=true # Ensure Ultralight number values are read as numbers not strings
      - IOTA_MONGO_HOST=mongo-db # The host name of MongoDB
      - IOTA_MONGO_PORT=${MONGO_DB_PORT} # The port mongoDB is listening on
      - IOTA_MONGO_DB=iotagentul # The name of the database used in mongoDB
      - IOTA_HTTP_PORT=${IOTA_SOUTH_PORT} # The port used for device traffic over HTTP
      - IOTA_PROVIDER_URL=http://iot-agent:${IOTA_NORTH_PORT}
      - IOTA_CB_NGSI_VERSION=ld # use NGSI-LD when sending updates for active attributes
      - IOTA_JSON_LD_CONTEXT=http://context/ngsi-context.jsonld
      - IOTA_FALLBACK_TENANT=openiot
    healthcheck:
      interval: 30s


  # Tutorial acts as a series of dummy IoT Sensors over HTTP
  tutorial:
    labels:
      org.fiware: 'tutorial'
    image: fiware/tutorials.ngsi-ld
    hostname: iot-sensors
    container_name: fiware-tutorial
    depends_on:
      - mongo-db
    networks:
      default:
        aliases:
          - tutorial
          - context-provider
    expose:
      - "${TUTORIAL_APP_PORT}"
      - "${TUTORIAL_DUMMY_DEVICE_PORT}"
    ports:
      - "${TUTORIAL_APP_PORT}:${TUTORIAL_APP_PORT}" # localhost:3000
      - "${TUTORIAL_DUMMY_DEVICE_PORT}:${TUTORIAL_DUMMY_DEVICE_PORT}" # localhost:3001
    environment:
      - DEBUG=tutorial:*
      - WEB_APP_PORT=${TUTORIAL_APP_PORT} # Port used by the content provider proxy and web-app for viewing data
      - IOTA_HTTP_HOST=iot-agent
      - IOTA_HTTP_PORT=${IOTA_SOUTH_PORT}
      - OPENWEATHERMAP_KEY_ID=<ADD_YOUR_KEY_ID>
      - TWITTER_CONSUMER_KEY=<ADD_YOUR_CONSUMER_KEY>
      - TWITTER_CONSUMER_SECRET=<ADD_YOUR_CONSUMER_SECRET>
      - MONGO_URL=mongodb://mongo-db:27017
      - IOTA_JSON_LD_CONTEXT=http://context/ngsi-context.jsonld

      - PIG_COUNT=${PIG_COUNT}
      - COW_COUNT=${COW_COUNT}


  # Quantum Leap is persisting Short Term History to Crate-DB
  quantumleap:
    labels:
      org.fiware: 'tutorial'
    # there is an issue with the health-check in the latest ql release. I fixed it a couple of weeks ago, but there is no official release     
    # yet. Therefore you can use this snapshot image
    image: quay.io/fiware/quantumleap:0.9.0-PRE
    hostname: quantumleap
    container_name: fiware-quantumleap
    depends_on:
      - timescale
      - redis-db
    networks:
      - default
    ports:
      - "8668:8668"
    environment:
      # ql needs this file to make timescale the default db 
      - QL_CONFIG=/config/config.yaml
      # timescale is an extension to postgres, thus we need to configure the postgres env vars
      - POSTGRES_HOST=timescale
      - POSTGRES_PORT=5432
      - POSTGRES_DB_NAME=ql
      - POSTGRES_DB_USER=ql
      - POSTGRES_DB_PASS=ql
      - REDIS_HOST=redis-db
      - REDIS_PORT=6379
      - LOGLEVEL=DEBUG
    volumes:
     # mount the config file. It only contains one line
      - ${PWD}/config.yaml:/config/config.yaml

  redis-db:
    labels:
      org.fiware: 'tutorial'
    image: redis:${REDIS_VERSION}
    hostname: redis-db
    container_name: db-redis
    networks:
      - default
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}" # localhost:6379
    volumes:
      - redis-db:/data
    healthcheck:
      test: |
        host=`hostname -i || echo '127.0.0.1'`;
        ping=`redis-cli -h "$host" ping` && [ "$ping" = 'PONG' ] && echo 0 || echo 1
      interval: 10s

  # replacement for crate db
  timescale:
    labels:
      org.fiware: 'tutorial'
    image: timescale/timescaledb-postgis:1.7.5-pg12
    hostname: timescale
    container_name: timescale
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ql" ]
      interval: 15s
      timeout: 15s
      retries: 5
      start_period: 60s
    environment:
      - POSTGRES_USER=ql
      - POSTGRES_PASSWORD=ql
      - POSTGRES_HOST_AUTH_METHOD=trust
    expose:
      - "5432"
    ports:
      - "5432:5432"
    networks:
      - default

  # Other services
  grafana:
    labels:
      org.fiware: 'tutorial'
    image: grafana/grafana:6.1.6
    container_name: grafana
    depends_on:
      - crate-db
    ports:
      - "3003:3000"
    environment:
      - GF_INSTALL_PLUGINS=https://github.com/orchestracities/grafana-map-plugin/archive/master.zip;grafana-map-plugin,grafana-clock-panel,grafana-worldmap-panel
    volumes:
      - grafana:/var/lib/grafana

networks:
  default:
    labels:
      org.fiware: 'tutorial'
    ipam:
      config:
        - subnet: 172.18.1.0/24

volumes:
  redis-db: ~
  grafana: ~
  mongo-db: ~
  mongo-config: ~
  data-models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data-models