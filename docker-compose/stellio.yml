version: '3.9'
services:
  api-gateway:
    container_name: stellio-api-gateway
    hostname: stellio
    labels:
      org.fiware: 'tutorial'
    image: stellio/stellio-api-gateway:${STELLIO_DOCKER_TAG}
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "${STELLIO_PORT}:8080"

  entity-service:
    restart: always
    container_name: stellio-entity-service
    labels:
      org.fiware: 'tutorial'
    image: stellio/stellio-entity-service:${STELLIO_DOCKER_TAG}
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - APPLICATION_AUTHENTICATION_ENABLED=false
    ports:
      - 8082:8082
    depends_on:
      neo4j:
        condition: service_healthy
      kafka:
        condition: service_started

  search-service:
    container_name: stellio-search-service
    labels:
      org.fiware: 'tutorial'
    image: stellio/stellio-search-service:${STELLIO_DOCKER_TAG}
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres/stellio_search
      - SPRING_FLYWAY_URL=jdbc:postgresql://postgres/stellio_search
      - SPRING_R2DBC_USERNAME=stellio_search
      - SPRING_R2DBC_PASSWORD=stellio_search_db_password
      - APPLICATION_AUTHENTICATION_ENABLED=false
    ports:
      - 8083:8083
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started

  subscription-service:
    container_name: stellio-subscription-service
    labels:
      org.fiware: 'tutorial'
    image: stellio/stellio-subscription-service:${STELLIO_DOCKER_TAG}
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres/stellio_subscription
      - SPRING_FLYWAY_URL=jdbc:postgresql://postgres/stellio_subscription
      - SPRING_R2DBC_USERNAME=stellio_subscription
      - SPRING_R2DBC_PASSWORD=stellio_subscription_db_password
      - APPLICATION_AUTHENTICATION_ENABLED=false
    ports:
      - 8084:8084
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started

  zookeeper:
    labels:
      org.fiware: 'tutorial'
    image: confluentinc/cp-zookeeper:5.5.7
    container_name: zookeeper
    ports:
      - 2181:2181
    restart: always
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    labels:
      org.fiware: 'tutorial'
    image: confluentinc/cp-kafka:5.5.7
    container_name: kafka
    ports:
      - 29092:29092
    restart: always
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper



  # Databases
  neo4j:
    labels:
      org.fiware: 'tutorial'
    image: neo4j:4.4
    hostname: neo4j
    container_name: db-neo4j
    volumes:
      - neo4j-db:/data
    environment:
      - NEO4J_dbms_default__database=stellio
      - NEO4J_AUTH=none
      - "NEO4J_dbms_security_procedures_unrestricted=apoc.*"
      - "NEO4J_dbms_security_procedures_allowlist=apoc.*"
      - NEO4JLABS_PLUGINS=["apoc"]
    ports:
      - 7474:7474
      - 7687:7687
    # following https://github.com/neo4j/neo4j/issues/7203#issuecomment-898511474
    healthcheck:
      test: wget -qO- http://localhost:7474 || exit 1
      interval: 1s
      timeout: 10s
      retries: 20
      start_period: 3s

  postgres:
    labels:
      org.fiware: 'tutorial'
    image: stellio/stellio-timescale-postgis:2.3.0-pg13
    hostname: postgres
    container_name: db-postgres
    environment:
      - POSTGRES_PASSWORD=password
      - "POSTGRES_MULTIPLE_DATABASES=stellio_search,stellio_search,stellio_search_db_password: stellio_subscription,stellio_subscription,stellio_subscription_db_password"
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - 5432:5432
    volumes:
      - postgres-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 10s


  # IoT-Agent connects to the Stellio Broker
  iot-agent:
    environment:
      - IOTA_DEFAULT_RESOURCE=/iot/d
      - IOTA_CB_HOST=api-gateway # name of the context broker to update context
      - IOTA_CB_PORT=${STELLIO_PORT} # port the context broker listens on to update context

  # Tutorial acts as a series of dummy IoT Sensors over HTTP and connects to the Stellio Broker
  tutorial:
    environment:
      - IOTA_DEFAULT_RESOURCE=/iot/d
      - DUMMY_DEVICES_PORT=${TUTORIAL_DUMMY_DEVICE_PORT} # Port used by the dummy IOT devices to receive commands
      - DUMMY_DEVICES_TRANSPORT=HTTP # Default transport used by dummy Io devices
      - DUMMY_DEVICES_PAYLOAD=ULTRALIGHT
      - CONTEXT_BROKER=http://stellio:${STELLIO_PORT}/ngsi-ld/v1 # URL of the context broker to update context
     
volumes:
  neo4j-db: ~
  postgres-db: ~
