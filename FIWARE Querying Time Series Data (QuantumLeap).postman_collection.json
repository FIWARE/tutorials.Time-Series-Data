{
	"info": {
		"_postman_id": "dceacf1d-ab06-4cdb-a217-9956d295e6ab",
		"name": "FIWARE Querying Time Series Data (QuantumLeap)",
		"description": "This tutorial is an introduction to\n[FIWARE QuantumLeap](https://smartsdk.github.io/ngsi-timeseries-api/) - a\ngeneric enabler which is used to persist context data into a **CrateDB**\ndatabase. The tutorial activates the IoT sensors connected in the\n[previous tutorial](https://github.com/Fiware/tutorials.IoT-Agent) and persists\nmeasurements from those sensors into the database. To retrieve time-based\naggregations of such data, users can either use **QuantumLeap** query API or\nconnect directly to the **CrateDB** HTTP endpoint. Results are visualised on a\ngraph or via the **Grafana** time series analytics tool.\n\nThe tutorial uses [cUrl](https://ec.haxx.se/) commands throughout, but is also\navailable as\n[Postman documentation](https://fiware.github.io/tutorials.Time-Series-Data/)\n\nThe `docker-compose` files for this tutorial can be found on GitHub: \n\n![GitHub](https://fiware.github.io/tutorials.Time-Series-Data/icon/GitHub-Mark-32px.png) [FIWARE 304: Time-Series Data](https://github.com/Fiware/tutorials.Time-Series-Data)\n\n# Persisting and Querying Time Series Data (CrateDB)\n\n> \"Forever is composed of nows.\"\n>\n> â€” Emily Dickinson\n\n[Previous tutorials](https://github.com/Fiware/tutorials.Historic-Context) have\nshown how to persist historic context data into a range of databases such as\n**MySQL** and **PostgreSQL**. Furthermore, the\n[Short Term Historic](https://github.com/Fiware/tutorials.Short-Term-History)\ntutorial has introduced the\n[STH-Comet](https://fiware-sth-comet.readthedocs.io/) generic enabler for\npersisting and querying historic context data using a **MongoDB** database.\n\nFIWARE [QuantumLeap](https://smartsdk.github.io/ngsi-timeseries-api/) is an\nalternative generic enabler created specifically for data persistence into the\n**CrateDB** time-series database, and therefore offers an alternative to the\n[STH-Comet](https://fiware-sth-comet.readthedocs.io/).\n\n[CrateDB](https://crate.io/) is a distributed SQL DBMS designed for use with the\ninternet of Things. It is capable of ingesting a large number of data points per\nsecond and can be queried in real-time. The database is designed for the\nexecution of complex queries such as geospatial and time series data. Retrieval\nof this historic context data allows for the creation of graphs and dashboards\ndisplaying trends over time.\n\nA summary of the differences can be seen below:\n\n| QuantumLeap                                                                                            | STH-Comet                                                                                          |\n| ------------------------------------------------------------------------------------------------------ | -------------------------------------------------------------------------------------------------- |\n| Offers an NGSI v2 interface for notifications                                                          | Offers an NGSI v1 interface for notifications                                                      |\n| Persists Data to a CrateDB database                                                                    | Persists Data to MongoDB database                                                                  |\n| Offers its own HTTP endpoint for queries, but you can also query CrateDB                               | Offers its own HTTP endpoint for queries - MongoDB database cannot be accessed directly            |\n| QuantumLeap supports complex data queries (thanks to CrateDB)                                          | STH-Comet offers a limited set of queries                                                          |\n| CrateDB is a distributed and scalable SQL DBMS built atop NoSQL storage                                | MongoDB is a document based NoSQL database                                                         |\n| QuantumLeap's API is docummented in OpenAPI [here](https://app.swaggerhub.com/apis/smartsdk/ngsi-tsdb) | STH-Comet's API is explained in its docs [here](https://fiware-sth-comet.readthedocs.io/en/latest) |\n\nFurther details about the differences between the underlying database engines\ncan be found [here](https://db-engines.com/en/system/CrateDB%3BMongoDB).\n\n## Analyzing time series data\n\nThe appropriate use of time series data analysis will depend on your use case\nand the reliability of the data measurements you receive. Time series data\nanalysis can be used to answer questions such as:\n\n-   What was the maximum measurement of a device within a given time period?\n-   What was the average measurement of a device within a given time period?\n-   What was the sum of the measurements sent by a device within a given time\n    period?\n\nIt can also be used to reduce the significance of each individual data point to\nexclude outliers by smoothing.\n\n#### Grafana\n\n[Grafana](https://grafana.com/) is an open source software for time series\nanalytics tool which will be used during this tutorial. It integrates with a\nvariety of time-series databases including **CrateDB**. It is available licensed\nunder the Apache License 2.0. More information can be found at\nhttps://grafana.com/.\n\n#### Device Monitor\n\nFor the purpose of this tutorial, a series of dummy IoT devices have been\ncreated, which will be attached to the context broker. Details of the\narchitecture and protocol used can be found in the\n[IoT Sensors tutorial](https://github.com/Fiware/tutorials.IoT-Sensors). The\nstate of each device can be seen on the UltraLight device monitor web page found\nat: `http://localhost:3000/device/monitor`\n\n![FIWARE Monitor](https://fiware.github.io/tutorials.Time-Series-Data/img/device-monitor.png)\n\n#### Device History\n\nOnce **QuantumLeap** has started aggregating data, the historical state of each\ndevice can be seen on the device history web page found at:\n`http://localhost:3000/device/history/urn:ngsi-ld:Store:001`\n\n![](https://fiware.github.io/tutorials.Time-Series-Data/img/history-graphs.png)\n\n# Architecture\n\nThis application builds on the components and dummy IoT devices created in\n[previous tutorials](https://github.com/Fiware/tutorials.IoT-Agent/). It will\nuse three FIWARE components: the\n[Orion Context Broker](https://fiware-orion.readthedocs.io/en/latest/), the\n[IoT Agent for Ultralight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/),\nand [QuantumLeap](https://smartsdk.github.io/ngsi-timeseries-api/) .\n\nTherefore the overall architecture will consist of the following elements:\n\n-   The **FIWARE Generic Enablers**:\n\n    -   The FIWARE\n        [Orion Context Broker](https://fiware-orion.readthedocs.io/en/latest/)\n        which will receive requests using\n        [NGSI](https://fiware.github.io/specifications/OpenAPI/ngsiv2)\n    -   The FIWARE\n        [IoT Agent for Ultralight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/)\n        which will receive northbound measurements from the dummy IoT devices in\n        [Ultralight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/usermanual/index.html#user-programmers-manual)\n        format and convert them to\n        [NGSI](https://fiware.github.io/specifications/OpenAPI/ngsiv2) requests\n        for the context broker to alter the state of the context entities\n    -   FIWARE [QuantumLeap](https://smartsdk.github.io/ngsi-timeseries-api/)\n        subscribed to context changes and persisting them into a **CrateDB**\n        database\n\n-   A [MongoDB](https://www.mongodb.com/) database:\n\n    -   Used by the **Orion Context Broker** to hold context data information\n        such as data entities, subscriptions and registrations\n    -   Used by the **IoT Agent** to hold device information such as device URLs\n        and Keys\n\n-   A [CrateDB](https://crate.io/) database:\n\n    -   Used as a data sink to hold time-based historical context data\n    -   offers an HTTP endpoint to interpret time-based data queries\n\n-   A **Context Provider**: - A webserver acting as set of\n    [dummy IoT devices](https://github.com/Fiware/tutorials.IoT-Sensors) using\n    the\n    [Ultralight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/usermanual/index.html#user-programmers-manual)\n    protocol running over HTTP. - Note the **Stock Management Frontend** and\n    **Context Provider NGSI** proxy are not used in this tutorial.\n\nSince all interactions between the elements are initiated by HTTP requests, the\nentities can be containerized and run from exposed ports.\n\nThe overall architecture can be seen below:\n\n![](https://fiware.github.io/tutorials.Time-Series-Data/img/architecture.png)\n\n# Prerequisites\n\n## Docker and Docker Compose\n\nTo keep things simple all components will be run using\n[Docker](https://www.docker.com). **Docker** is a container technology which\nallows to different components isolated into their respective environments.\n\n-   To install Docker on Windows follow the instructions\n    [here](https://docs.docker.com/docker-for-windows/)\n-   To install Docker on Mac follow the instructions\n    [here](https://docs.docker.com/docker-for-mac/)\n-   To install Docker on Linux follow the instructions\n    [here](https://docs.docker.com/install/)\n\n**Docker Compose** is a tool for defining and running multi-container Docker\napplications. A series of\n[YAML files](https://raw.githubusercontent.com/Fiware/tutorials.Historic-Context/master/cygnus)\nare used to configure the required services for the application. This means all\ncontainer services can be brought up in a single command. Docker Compose is\ninstalled by default as part of Docker for Windows and Docker for Mac, however\nLinux users will need to follow the instructions found\n[here](https://docs.docker.com/compose/install/)\n\nYou can check your current **Docker** and **Docker Compose** versions using the\nfollowing commands:\n\n```console\ndocker-compose -v\ndocker version\n```\n\nPlease ensure that you are using Docker version 20.10 or higher and Docker\nCompose 1.21 or higher and upgrade if necessary.\n\n## Cygwin for Windows\n\nWe will start up our services using a simple Bash script. Windows users should\ndownload [cygwin](http://www.cygwin.com/) to provide a command-line\nfunctionality similar to a Linux distribution on Windows.\n\n# Start Up\n\nBefore you start, you should ensure that you have obtained or built the\nnecessary Docker images locally. Please clone the repository and create the\nnecessary images by running the commands as shown:\n\n```console\ngit clone git@github.com:Fiware/tutorials.Time-Series-Data.git\ncd tutorials.Time-Series-Data\n\n./services create\n```\n\nThereafter, all services can be initialized from the command-line by running the\n[services](https://github.com/Fiware/tutorials.Time-Series-Data/blob/master/services)\nBash script provided within the repository:\n\n```console\n./services start\n```\n\n> :information_source: **Note:** If you want to clean up and start over again\n> you can do so with the following command:\n>\n> ```console\n> ./services stop\n> ```\n\n# Connecting FIWARE to a CrateDB Database via QuantumLeap\n\nIn the configuration, **QuantumLeap** listens to NGSI v2 notifications on port\n`8668` and persists historic context data to the **CrateDB**. **CrateDB** is\naccessible using port `4200` and can either be queried directly or attached to\nthe Grafana analytics tool. The rest of the system providing the context data\nhas been described in previous tutorials\n\n## CrateDB Database Server Configuration\n\n```yaml\ncratedb:\n    image: crate:2.3\n    hostname: cratedb\n    ports:\n        - \"4200:4200\"\n        - \"4300:4300\"\n    command:\n        -Ccluster.name=democluster -Chttp.cors.enabled=true\n        -Chttp.cors.allow-origin=\"*\"\n```\n\n## QuantumLeap Configuration\n\n```yaml\nquantumleap:\n    image: smartsdk/quantumleap\n    hostname: quantumleap\n    ports:\n        - \"8668:8668\"\n    depends_on:\n        - cratedb\n    environment:\n        - CRATE_HOST=cratedb\n```\n\n## Grafana Configuration\n\n```yaml\ngrafana:\n    image: grafana/grafana\n    depends_on:\n        - cratedb\n    ports:\n        - \"3003:3000\"\n    environment:\n        - GF_INSTALL_PLUGINS=crate-datasource,grafana-clock-panel,grafana-worldmap-panel\n```\n\nThe `quantumleap` container is listening on one port:\n\n-   The Operations for port for QuantumLeap - `8668` is where the service will\n    be listening for notifications from the Orion context broker and where users\n    can query data from.\n\nThe `CRATE_HOST` environment variable defines the location where the data will\nbe persisted.\n\nThe `cratedb` container is listening on two ports:\n\n-   The Admin UI is available on port `4200`\n-   The transport protocol is available on `port 4300`\n\nThe `grafana` container has connected up port `3000` internally with port `3003`\nexternally. This is because the Grafana UI is usually available on port `3000`,\nbut this port has already been taken by the dummy devices UI so it has been\nshifted to another port. The Grafana Environment variables are described within\ntheir own [documentation](http://docs.grafana.org/installation/configuration/).\nThe configuration ensures we will be able to connect to the **CrateDB** database\nlater on in the tutorial\n\n### Generating Context Data\n\nFor the purpose of this tutorial, we must be monitoring a system where the\ncontext is periodically being updated. The dummy IoT Sensors can be used to do\nthis. Open the device monitor page at `http://localhost:3000/device/monitor` and\nunlock a **Smart Door** and switch on a **Smart Lamp**. This can be done by\nselecting an appropriate command from the drop down list and pressing the `send`\nbutton. The stream of measurements coming from the devices can then be seen on\nthe same page:\n\n![](https://fiware.github.io/tutorials.IoT-Sensors/img/door-open.gif)\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setting up Subscriptions",
			"item": [
				{
					"name": "Orion - QuantumLeap - Aggregate Motion Sensor Count Events",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Notify QuantumLeap of all Motion Sensor count changes\",\n  \"subject\": {\n    \"entities\": [\n      {\n        \"idPattern\": \"Motion.*\"\n      }\n    ],\n    \"condition\": {\n      \"attrs\": [\n        \"count\"\n      ]\n    }\n  },\n  \"notification\": {\n    \"http\": {\n      \"url\": \"http://quantumleap:8668/v2/notify\"\n    },\n    \"attrs\": [\n      \"count\"\n    ],\n    \"metadata\": [\"dateCreated\", \"dateModified\"]\n  }\n}"
						},
						"url": {
							"raw": "http://{{orion}}/v2/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"subscriptions",
								""
							]
						},
						"description": "The rate of change of the **Motion Sensor** is driven by events in the real-world. We need to receive\nevery event to be able to aggregate the results.\n\nThis is done by making a POST request to the `/v2/subscription` endpoint of the Orion Context Broker.\n\n* The `fiware-service` and `fiware-servicepath` headers are used to filter the subscription to only listen to measurements from the attached IoT Sensors\n* The `idPattern` in the request body ensures that **Quantum Leap** will be informed of all **Motion Sensor** data changes.\n* The notification `url` must match the exposed port.\n\nThe `metadata` attribute ensures that the `time_index` column within the Crate-DB database will match the data found within the **Orion Context Broker** rather than using the creation time of the record within the Crate-DB itself."
					},
					"response": []
				},
				{
					"name": "Orion - QuantumLeap - Sample Lamp Luminosity",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Notify Quantum Leap to sample Lamp changes every five seconds\",\n  \"subject\": {\n    \"entities\": [\n      {\n        \"idPattern\": \"Lamp.*\"\n      }\n    ],\n    \"condition\": {\n      \"attrs\": [\n        \"luminosity\",\n        \"location\"\n      ]\n    }\n  },\n  \"notification\": {\n    \"http\": {\n      \"url\": \"http://quantumleap:8668/v2/notify\"\n    },\n    \"attrs\": [\n      \"luminosity\", \"location\"\n    ],\n    \"metadata\": [\"dateCreated\", \"dateModified\"]\n  },\n  \"throttling\": 5\n}"
						},
						"url": {
							"raw": "http://{{orion}}/v2/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"subscriptions",
								""
							]
						},
						"description": "The luminosity of the **Smart Lamp** is constantly changing, we only need to **sample** the values to be\nable to work out relevant statistics such as minimum and maximum values and rates of change.\n\nThis is done by making a POST request to the `/v2/subscription` endpoint of the Orion Context Broker\nand including the `throttling` attribute in the request body.\n\n* The `fiware-service` and `fiware-servicepath` headers are used to filter the subscription to only listen to measurements from the attached IoT Sensors\n* The `idPattern` in the request body ensures that **Quantum Leap** will be informed of all **Smart Lamp** data changes only\n* The notification `url` must match the configured `STH_PORT`\n* The `throttling` value defines the rate that changes are sampled.\n* \n\nThe `metadata` attribute ensures that the `time_index` column within the Crate-DB database will match the data found within the **Orion Context Broker** rather than using the creation time of the record within the Crate-DB itself."
					},
					"response": []
				},
				{
					"name": "Orion - Check Subscription is working",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "fiware-service",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							}
						],
						"url": {
							"raw": "http://{{orion}}/v2/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"v2",
								"subscriptions",
								""
							]
						},
						"description": "If the subscriptions have been created, you can check to see if they are firing by making a GET \nrequest to the `/v2/subscriptions` endpoint.\n\nWithin the `notification` section of the response, you can see several additional `attributes` which describe the health of the subscription\n\nIf the criteria of the subscription have been met, `timesSent` should be greater than `0`.\nA zero value would indicate that the `subject` of the subscription is incorrect or the subscription \nhas created with the wrong `fiware-service-path` or `fiware-service` header\n\nThe `lastNotification` should be a recent timestamp - if this is not the case, then the devices\nare not regularly sending data. Remember to unlock the **Smart Door** and switch on the **Smart Lamp**\n\nThe `lastSuccess` should match the `lastNotification` date - if this is not the case \nthen **Quantum Leap** is not receiving the subscription properly. Check that the host name\nand port are correct. \n\nFinally, check that the `status` of the subscription is `active` - an expired subscription\nwill not fire."
					},
					"response": []
				}
			],
			"description": "Once a dynamic context system is up and running, we need to inform **Quantum\nLeap** directly of changes in context. As expected this is done using the\nsubscription mechanism of the **Orion Context Broker**. The `attrsFormat=legacy`\nattribute is not required since **QuantumLeap** accepts NGSI v2 notifications\ndirectly.\n\nSubscriptions will be covered in the next subsections. More details about\nsubscriptions can be found in previous tutorials or in the\n[subscriptions section](https://quantumleap.readthedocs.io/en/latest/user/#orion-subscription)\nof QuantumLeap docs.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0ea31757-bc61-4572-84e0-9e15b337dcae",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "11352768-823c-4114-a385-7058433368ce",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Time Series Data Queries (QuantumLeap API)",
			"item": [
				{
					"name": "QuantumLeap - Obtain version information",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{quantumleap}}/v2/version",
							"protocol": "http",
							"host": [
								"{{quantumleap}}"
							],
							"path": [
								"v2",
								"version"
							]
						}
					},
					"response": []
				},
				{
					"name": "List the first N Sampled Values",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Fiware-Service",
								"value": "openiot",
								"type": "text"
							},
							{
								"key": "Fiware-ServicePath",
								"value": "/",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{quantumleap}}/v2/entities/Lamp:001/attrs/luminosity?=3&limit=3",
							"protocol": "http",
							"host": [
								"{{quantumleap}}"
							],
							"path": [
								"v2",
								"entities",
								"Lamp:001",
								"attrs",
								"luminosity"
							],
							"query": [
								{
									"key": "",
									"value": "3"
								},
								{
									"key": "limit",
									"value": "3"
								}
							]
						},
						"description": "This example shows the first 3 sampled `luminosity` values from `Lamp:001`. \n\nNote the use of `Fiware-Service` and `Fiware-ServicePath` headers. These are\nrequired only when data are pushed to orion using such headers (in multitenancy\nscenarios). Failing to align these headers will result in no data being\nreturned."
					},
					"response": []
				},
				{
					"name": "List N Sampled Values at an Offset",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Fiware-Service",
								"value": "openiot",
								"type": "text"
							},
							{
								"key": "Fiware-ServicePath",
								"value": "/",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{quantumleap}}/v2/entities/Motion:001/attrs/count?offset=3&limit=3",
							"protocol": "http",
							"host": [
								"{{quantumleap}}"
							],
							"path": [
								"v2",
								"entities",
								"Motion:001",
								"attrs",
								"count"
							],
							"query": [
								{
									"key": "offset",
									"value": "3"
								},
								{
									"key": "limit",
									"value": "3"
								}
							]
						},
						"description": "This example shows the fourth, fifth and sixth sampled count values from Motion:001.\n"
					},
					"response": []
				},
				{
					"name": "List the latest N Sampled Values",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Fiware-Service",
								"value": "openiot",
								"type": "text"
							},
							{
								"key": "Fiware-ServicePath",
								"value": "/",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{quantumleap}}/v2/entities/Motion:001/attrs/count?lastN=3",
							"protocol": "http",
							"host": [
								"{{quantumleap}}"
							],
							"path": [
								"v2",
								"entities",
								"Motion:001",
								"attrs",
								"count"
							],
							"query": [
								{
									"key": "lastN",
									"value": "3"
								}
							]
						},
						"description": "This example shows latest three sampled `count` values from `Motion:001`."
					},
					"response": []
				},
				{
					"name": "List the Sum of values over a time period",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Fiware-Service",
								"value": "openiot",
								"type": "text"
							},
							{
								"key": "Fiware-ServicePath",
								"value": "/",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{quantumleap}}/v2/entities/Motion:001/attrs/count?aggrMethod=count&aggrPeriod=minute&lastN=3",
							"protocol": "http",
							"host": [
								"{{quantumleap}}"
							],
							"path": [
								"v2",
								"entities",
								"Motion:001",
								"attrs",
								"count"
							],
							"query": [
								{
									"key": "aggrMethod",
									"value": "count"
								},
								{
									"key": "aggrPeriod",
									"value": "minute"
								},
								{
									"key": "lastN",
									"value": "3"
								}
							]
						},
						"description": "This example shows total `count` values from `Motion:001` over each minute.\n\nYou need QuantumLeap **version >= 0.4.1**. You can check your version with a\nsimple GET like:\n\n```\ncurl -X GET \\\n  'http://localhost:8668/v2/version' \\\n  -H 'Accept: application/json'\n```"
					},
					"response": []
				},
				{
					"name": "List the Minimum Values over a Time Period",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Fiware-Service",
								"value": "openiot",
								"type": "text"
							},
							{
								"key": "Fiware-ServicePath",
								"value": "/",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{quantumleap}}/v2/entities/Lamp:001/attrs/luminosity?aggrMethod=min&aggrPeriod=minute&lastN=3",
							"protocol": "http",
							"host": [
								"{{quantumleap}}"
							],
							"path": [
								"v2",
								"entities",
								"Lamp:001",
								"attrs",
								"luminosity"
							],
							"query": [
								{
									"key": "aggrMethod",
									"value": "min"
								},
								{
									"key": "aggrPeriod",
									"value": "minute"
								},
								{
									"key": "lastN",
									"value": "3"
								}
							]
						},
						"description": "This example shows minimum `luminosity` values from `Lamp:001` over each minute.\n\nYou need QuantumLeap **version >= 0.4.1**. You can check your version with a\nsimple GET like:\n\n```console\ncurl -X GET \\\n  'http://localhost:8668/v2/version' \\\n  -H 'Accept: application/json'\n```"
					},
					"response": []
				},
				{
					"name": "List the Maximum Values over a Time Period",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Fiware-Service",
								"value": "openiot",
								"type": "text"
							},
							{
								"key": "Fiware-ServicePath",
								"value": "/",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{quantumleap}}/v2/entities/Lamp:001/attrs/luminosity?aggrMethod=max&fromDate=2018-06-27T09:00:00&toDate=2018-06-30T23:59:59",
							"protocol": "http",
							"host": [
								"{{quantumleap}}"
							],
							"path": [
								"v2",
								"entities",
								"Lamp:001",
								"attrs",
								"luminosity"
							],
							"query": [
								{
									"key": "aggrMethod",
									"value": "max"
								},
								{
									"key": "fromDate",
									"value": "2018-06-27T09:00:00"
								},
								{
									"key": "toDate",
									"value": "2018-06-30T23:59:59"
								}
							]
						},
						"description": "This example shows maximum `luminosity` value of `Lamp:001` that occurred\nbetween from `2018-06-27T09:00:00` to `2018-06-30T23:59:59`.\n\nAlter the `fromDate` and `toDate` parameters to retrieve your current data"
					},
					"response": []
				},
				{
					"name": "List the latest N Sampled Values of Devices near a Point",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Fiware-Service",
								"type": "text",
								"value": "openiot"
							},
							{
								"key": "Fiware-ServicePath",
								"type": "text",
								"value": "/"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{quantumleap}}/v2/types/Lamp/attrs/luminosity?lastN=4&georel=near;maxDistance:5000&geometry=point&coords=52.5547,13.3986\n",
							"protocol": "http",
							"host": [
								"{{quantumleap}}"
							],
							"path": [
								"v2",
								"types",
								"Lamp",
								"attrs",
								"luminosity"
							],
							"query": [
								{
									"key": "lastN",
									"value": "4"
								},
								{
									"key": "georel",
									"value": "near;maxDistance:5000"
								},
								{
									"key": "geometry",
									"value": "point"
								},
								{
									"key": "coords",
									"value": "52.5547,13.3986\n"
								}
							]
						},
						"description": "This example shows the latest four sampled `luminosity` values of lamps that\nare within a 5 km radius from `52Â°33'16.9\"N 13Â°23'55.0\"E` (Bornholmer StraÃŸe\n65, Berlin, Germany). If you have turned on all the lamps available on the\ndevice monitor page, you should be able to see data for `Lamp:001` and\n`Lamp:004`.\n\n> **Note:** Geographical queries are only available\n> starting from version `0.5` of QuantumLeap which implements the full\n> set of queries detailed in the Geographical Queries section of the\n> [NGSI v2 specification](http://fiware.github.io/specifications/ngsiv2/stable/)."
					},
					"response": []
				},
				{
					"name": "List the latest N Sampled Values of Devices in an Area",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Fiware-Service",
								"type": "text",
								"value": "openiot"
							},
							{
								"key": "Fiware-ServicePath",
								"type": "text",
								"value": "/"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{quantumleap}}/v2/types/Lamp/attrs/luminosity?lastN=4&georel=coveredBy&geometry=polygon&coords=52.5537,13.3996;52.5557,13.3996;52.5557,13.3976;52.5537,13.3976;52.5537,13.3996",
							"protocol": "http",
							"host": [
								"{{quantumleap}}"
							],
							"path": [
								"v2",
								"types",
								"Lamp",
								"attrs",
								"luminosity"
							],
							"query": [
								{
									"key": "lastN",
									"value": "4"
								},
								{
									"key": "georel",
									"value": "coveredBy"
								},
								{
									"key": "geometry",
									"value": "polygon"
								},
								{
									"key": "coords",
									"value": "52.5537,13.3996;52.5557,13.3996;52.5557,13.3976;52.5537,13.3976;52.5537,13.3996"
								}
							]
						},
						"description": "This example shows the latest four sampled `luminosity` values of lamps that\nare inside a square of side 200 m centred at `52Â°33'16.9\"N 13Â°23'55.0\"E`\n(Bornholmer StraÃŸe 65, Berlin, Germany). Even if you have turned on all the\nlamps available on the device monitor page, you should only see data for\n`Lamp:001`.\n\n> **Note:** Geographical queries are only available\n> starting from version `0.5` of QuantumLeap which implements the full\n> set of queries detailed in the Geographical Queries section of the\n> [NGSI v2 specification](http://fiware.github.io/specifications/ngsiv2/stable/)."
					},
					"response": []
				}
			],
			"description": "**CrateDB** offers an\n[HTTP Endpoint](https://crate.io/docs/crate/reference/en/latest/interfaces/http.html)\nthat can be used to submit SQL queries. The endpoint is accessible under\n`<servername:port>/_sql`.\n\nSQL statements are sent as the body of POST requests in JSON format, where the\nSQL statement is the value of the `stmt` attribute.\n\n> When to query **CrateDB** and when **QuantumLeap**?. As a rule of thumb,\n> prefer working always with **QuantumLeap** for the following reasons:\n>\n> -   Your experience will be closer to FIWARE NGSI APIs like Orion's.\n> -   Your application will not be tied to CrateDB's specifics nor QuantumLeap's\n>     implementation details, which could change and break your app.\n> -   QuantumLeap can be easily extended to other backends and your app will get\n>     compatibility for free.\n> -   If your deployment is distributed, you won't need to expose the ports of\n>     your database to the outside.\n\nIf your are sure your query is not supported by **QuantumLeap**, you may have to\nend up querying **CrateDB**, however, please open an issue in\n[QuantumLeap's repo](https://github.com/smartsdk/ngsi-timeseries-api/issues) so\nthe team is aware.\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d9f95699-2277-4b49-a5fb-a4d830c96eaf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "abacb9de-37b5-4464-bfe7-25f784aa1a9a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Time Series Data Queries (Crate-DB)",
			"item": [
				{
					"name": "Read Schemas",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"stmt\":\"SHOW SCHEMAS\"}"
						},
						"url": {
							"raw": "http://{{crate}}/_sql",
							"protocol": "http",
							"host": [
								"{{crate}}"
							],
							"path": [
								"_sql"
							]
						},
						"description": "Another way to see if data are being persisted is to check if a `table_schema`\nhas been created. This can be done by making a request to the **CrateDB** HTTP\nendpoint as shown below.\n\nSchema names are formed with the `mt` prefix followed by `fiware-service` header\nin lower case. The IoT Agent is forwarding measurements from the dummy IoT\ndevices, with the `FIWARE-Service` header `openiot`. These are being persisted\nunder the `mtopeniot` schema.\n\nIf the `mtopeniot` does not exist, then the subscription to **QuantumLeap** has\nnot been set up correctly. Check that the subscription exists, and has been\nconfigured to send data to the correct location."
					},
					"response": []
				},
				{
					"name": "Read Tables",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"stmt\":\"SHOW TABLES\"}"
						},
						"url": {
							"raw": "http://{{crate}}/_sql",
							"protocol": "http",
							"host": [
								"{{crate}}"
							],
							"path": [
								"_sql"
							]
						},
						"description": "**Quantum Leap** will persist data into separate tables within the Crate-DB database based on the entity type. Table names are formed with the `et` prefix and the entity type name in lowercase.\n\nThe response shows that both **Motion Sensor** data and **Smart Lamp** data are being persisted in the database."
					},
					"response": []
				},
				{
					"name": "List the first N Sampled Values",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"stmt\":\"SELECT * FROM mtopeniot.etlamp WHERE entity_id = 'Lamp:001'  ORDER BY time_index ASC LIMIT 3\"}"
						},
						"url": {
							"raw": "http://{{crate}}/_sql",
							"protocol": "http",
							"host": [
								"{{crate}}"
							],
							"path": [
								"_sql"
							]
						},
						"description": "This example shows the first 3 sampled `luminosity` values from `Lamp:001`. \n\nThe SQL statement uses `ORDER BY` and `LIMIT` clauses to sort the data. More details can be found under within the Crate-DB [documentation](https://crate.io/docs/crate/reference/en/latest/sql/statements/select.html)"
					},
					"response": []
				},
				{
					"name": "List N Sampled Values at an Offset",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"stmt\":\"SELECT * FROM mtopeniot.etmotion WHERE entity_id = 'Motion:001' ORDER BY time_index ASC  LIMIT 3 OFFSET 3\"}"
						},
						"url": {
							"raw": "http://{{crate}}/_sql",
							"protocol": "http",
							"host": [
								"{{crate}}"
							],
							"path": [
								"_sql"
							]
						},
						"description": "This example shows the fourth, fifth and sixth sampled count values from Motion:001.\n\nThe SQL statement uses an `OFFSET` clause to retrieve the required rows. \nMore details can be found under within the Crate-DB [documentation](https://crate.io/docs/crate/reference/en/latest/sql/statements/select.html)"
					},
					"response": []
				},
				{
					"name": "List the latest N Sampled Values",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"stmt\":\"SELECT * FROM mtopeniot.etmotion WHERE entity_id = 'Motion:001'  ORDER BY time_index DESC LIMIT 3\"}"
						},
						"url": {
							"raw": "http://{{crate}}/_sql",
							"protocol": "http",
							"host": [
								"{{crate}}"
							],
							"path": [
								"_sql"
							]
						},
						"description": "This example shows latest three sampled `count` values from `Motion:001`. \n\nThe SQL statement uses an `ORDER BY ... DESC` clause combined with a `LIMIT` clause to retrieve \nthe last N rows. More details can be found under within the Crate-DB [documentation](https://crate.io/docs/crate/reference/en/latest/sql/statements/select.html)"
					},
					"response": []
				},
				{
					"name": "List the Sum of values over a time period",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"stmt\":\"SELECT DATE_FORMAT (DATE_TRUNC ('minute', time_index)) AS minute, SUM (count) AS sum FROM mtopeniot.etmotion WHERE entity_id = 'Motion:001' GROUP BY minute ORDER BY minute\"}"
						},
						"url": {
							"raw": "http://{{crate}}/_sql",
							"protocol": "http",
							"host": [
								"{{crate}}"
							],
							"path": [
								"_sql"
							]
						},
						"description": "This example shows total `count` values from `Motion:001` over each minute.\n\nThe SQL statement uses a `SUM` function and `GROUP BY` clause to retrieve the relevant data.\nCrate-DB offers a range of [Date-Time Function](https://crate.io/docs/crate/reference/en/latest/general/builtins/scalar.html#date-and-time-functions) to truncate and convert the timestamps into data which can be grouped."
					},
					"response": []
				},
				{
					"name": "List the Minimum Values over a Time Period",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"stmt\":\"SELECT DATE_FORMAT (DATE_TRUNC ('minute', time_index)) AS minute, MIN (luminosity) AS min FROM mtopeniot.etlamp WHERE entity_id = 'Lamp:001' GROUP BY minute ORDER BY minute\"}"
						},
						"url": {
							"raw": "http://{{crate}}/_sql",
							"protocol": "http",
							"host": [
								"{{crate}}"
							],
							"path": [
								"_sql"
							]
						},
						"description": "This example shows minimum `luminosity` values from `Lamp:001` over each minute.\n\nThe SQL statement uses a `MIN` function and `GROUP BY` clause to retrieve the relevant data.\nCrate-DB offers a range of [Date-Time Function](https://crate.io/docs/crate/reference/en/latest/general/builtins/scalar.html#date-and-time-functions) to truncate and convert the timestamps into data which can be grouped."
					},
					"response": []
				},
				{
					"name": "List the Maximum Values over a Time Period",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"stmt\":\"SELECT DATE_FORMAT (DATE_TRUNC ('minute', time_index)) AS minute, MAX (luminosity) AS max FROM mtopeniot.etlamp WHERE entity_id = 'Lamp:001' GROUP BY minute ORDER BY minute\"}"
						},
						"url": {
							"raw": "http://{{crate}}/_sql",
							"protocol": "http",
							"host": [
								"{{crate}}"
							],
							"path": [
								"_sql"
							]
						},
						"description": "This example shows maximum `luminosity` values from `Lamp:001` over each minute.\n\nThe SQL statement uses a `MAX` function and `GROUP BY` clause to retrieve the relevant data.\nCrate-DB offers a range of [Date-Time Function](https://crate.io/docs/crate/reference/en/latest/general/builtins/scalar.html#date-and-time-functions) to truncate and convert the timestamps into data which can be grouped."
					},
					"response": []
				},
				{
					"name": "List the Average Values over a Time Period",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"stmt\":\"SELECT DATE_FORMAT (DATE_TRUNC ('minute', time_index)) AS minute, AVG (luminosity) AS average FROM mtopeniot.etlamp WHERE entity_id = 'Lamp:001' GROUP BY minute ORDER BY minute\"}"
						},
						"url": {
							"raw": "http://{{crate}}/_sql",
							"protocol": "http",
							"host": [
								"{{crate}}"
							],
							"path": [
								"_sql"
							]
						},
						"description": "This example shows the average of `luminosity` values from `Lamp:001` over each minute.\n\nThe SQL statement uses a `AVG` function and `GROUP BY` clause to retrieve the relevant data.\nCrate-DB offers a range of [Date-Time Function](https://crate.io/docs/crate/reference/en/latest/general/builtins/scalar.html#date-and-time-functions) to truncate and convert the timestamps into data which can be grouped."
					},
					"response": []
				}
			],
			"description": "**Crate-DB** offers an [HTTP Endpoint](https://crate.io/docs/crate/reference/en/latest/interfaces/http.html) that can be used to submit SQL queries. The endpoint is accessible under `<servername:port>/_sql`.\n\nSQL statements are sent as the body of POST requests in JSON format, where the SQL statement is the value of the `stmt` attribute.\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d9f95699-2277-4b49-a5fb-a4d830c96eaf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "abacb9de-37b5-4464-bfe7-25f784aa1a9a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "d1cff9ac-8932-417c-b6e2-582ba712ff79",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "cc3f098c-a786-4112-a15e-b1c8c83cc657",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "cc8c257a-ac6f-47d1-9753-9f5b100e719a",
			"key": "orion",
			"value": "localhost:1026",
			"type": "string"
		},
		{
			"id": "b51e19a3-a327-444a-9719-9d085e3b6038",
			"key": "quantumleap",
			"value": "localhost:8668",
			"type": "string"
		},
		{
			"id": "ef81cb5d-7aa4-4232-add9-002915da33a3",
			"key": "crate",
			"value": "localhost:4200",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}