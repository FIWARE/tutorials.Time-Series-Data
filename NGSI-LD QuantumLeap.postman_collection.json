{
	"info": {
		"_postman_id": "17fa5c4e-3836-49ce-8769-df5e9bba674e",
		"name": "NGSI-LD QuantumLeap",
		"description": "This tutorial is an introduction to [FIWARE QuantumLeap](https://smartsdk.github.io/ngsi-timeseries-api/) - a generic\nenabler which is used to persist context data into a **CrateDB** database. The tutorial activates the IoT sensors\nconnected in the [previous tutorial](https://github.com/FIWARE/tutorials.IoT-Agent) and persists measurements from those\nsensors into the database. To retrieve time-based aggregations of such data, users can either use **QuantumLeap** query\nAPI or connect directly to the **CrateDB** HTTP endpoint. Results are visualised on a graph or via the **Grafana** time\nseries analytics tool.\n\nThe `docker-compose` files for this tutorial can be found on GitHub: \n\n![GitHub](https://fiware.github.io/tutorials.Time-Series-Data/icon/GitHub-Mark-32px.png) [FIWARE 301: Persisting Context Data](https://github.com/Fiware/tutorials.Time-Series-Data)\n\n> \"Forever is composed of nows.\"\n>\n> â€” Emily Dickinson\n\nFIWARE [QuantumLeap](https://smartsdk.github.io/ngsi-timeseries-api/) is an time-based data-persistence generic enabler\ncreated specifically to persist and query time-series database (currently CrateDB and TimescaleDB). The component can\nrespond to NGSI-v2 or NGSI-LD subscriptions.\n\n[CrateDB](https://crate.io/) is a distributed SQL DBMS designed for use with the internet of Things. It is capable of\ningesting a large number of data points per second and can be queried in real-time. The database is designed for the\nexecution of complex queries such as geospatial and time series data. Retrieval of this historic context data allows for\nthe creation of graphs and dashboards displaying trends over time.\n\n[TimescaleDB](https://www.timescale.com/) scales PostgreSQL for time-series data via automatic partitioning across time\nand space (partitioning key), yet retains the standard PostgreSQL interface. In other words, TimescaleDB exposes what\nlook like regular tables, but are actually only an abstraction (or a virtual view) of many individual tables comprising\nthe actual data. In combination with [PostGIS](https://postgis.net/) extension can support geo-timeseries.\n\n## Analyzing time series data\n\nThe appropriate use of time series data analysis will depend on your use case and the reliability of the data\nmeasurements you receive. Time series data analysis can be used to answer questions such as:\n\n-   What was the maximum measurement of a device within a given time period?\n-   What was the average measurement of a device within a given time period?\n-   What was the sum of the measurements sent by a device within a given time period?\n\nIt can also be used to reduce the significance of each individual data point to exclude outliers by smoothing.\n\n#### Grafana\n\n[Grafana](https://grafana.com/) is an open source software for time series analytics tool which will be used during this\ntutorial. It integrates with a variety of time-series databases including **CrateDB** and **TimescaleDB**. It is\navailable licensed under the Apache License 2.0. More information can be found at `https://grafana.com/`.\n\n#### Device Monitor\n\nFor the purpose of this tutorial, a series of dummy agricultural IoT devices have been created, which will be attached\nto the context broker. Details of the architecture and protocol used can be found in the\n[IoT Sensors tutorial](https://github.com/FIWARE/tutorials.IoT-Sensors/tree/NGSI-LD) The state of each device can be\nseen on the UltraLight device monitor web page found at: `http://localhost:3000/device/monitor`\n\n![FIWARE Monitor](https://fiware.github.io/tutorials.Time-Series-Data/img/farm-devices.png)\n\n#### Device History\n\nOnce **QuantumLeap** has started aggregating data, the historical state of each device can be seen on the device history\nweb page found at: `http://localhost:3000/device/history/urn:ngsi-ld:Farm:001`\n\n![](https://fiware.github.io/tutorials.Time-Series-Data/img/history-graphs.png)\n\n# Architecture\n\nThis application builds on the components and dummy IoT devices created in\n[previous tutorials](https://github.com/FIWARE/tutorials.IoT-Agent/). It will use three FIWARE components: the\n[Orion Context Broker](https://fiware-orion.readthedocs.io/en/latest/), the\n[IoT Agent for Ultralight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/), and\n[QuantumLeap](https://smartsdk.github.io/ngsi-timeseries-api/) .\n\nTherefore the overall architecture will consist of the following elements:\n\n-   The **FIWARE Generic Enablers**:\n\n    -   The [Orion Context Broker](https://fiware-orion.readthedocs.io/en/latest/) which will receive requests using\n        [NGSI-LD](https://forge.etsi.org/swagger/ui/?url=https://forge.etsi.org/gitlab/NGSI-LD/NGSI-LD/raw/master/spec/updated/full_api.json)\n    -   The FIWARE [IoT Agent for UltraLight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/) which will\n        receive southbound requests using\n        [NGSI-LD](https://forge.etsi.org/swagger/ui/?url=https://forge.etsi.org/gitlab/NGSI-LD/NGSI-LD/raw/master/spec/updated/full_api.json)\n        and convert them to\n        [UltraLight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/usermanual/index.html#user-programmers-manual)\n        commands for the devices\n    -   FIWARE [QuantumLeap](https://smartsdk.github.io/ngsi-timeseries-api/) subscribed to context changes and\n        persisting them into a **CrateDB** database\n\n-   A [MongoDB](https://www.mongodb.com/) database:\n\n    -   Used by the **Orion Context Broker** to hold context data information such as data entities, subscriptions and\n        registrations\n    -   Used by the **IoT Agent** to hold device information such as device URLs and Keys\n\n-   A [CrateDB](https://crate.io/) database:\n\n    -   Used as a data sink to hold time-based historical context data\n    -   offers an HTTP endpoint to interpret time-based data queries\n\n-   The **Tutorial Application** does the following:\n    -   Offers static `@context` files defining the context entities within the system.\n    -   Acts as set of dummy [agricultural IoT devices](https://github.com/FIWARE/tutorials.IoT-Sensors/tree/NGSI-LD)\n        using the\n        [UltraLight 2.0](https://fiware-iotagent-ul.readthedocs.io/en/latest/usermanual/index.html#user-programmers-manual)\n        protocol running over HTTP.\n\nSince all interactions between the elements are initiated by HTTP requests, the entities can be containerized and run\nfrom exposed ports.\n\nThe overall architecture can be seen below:\n\n![](https://fiware.github.io/tutorials.Time-Series-Data/img/architecture.png)\n\n# Prerequisites\n\n## Docker and Docker Compose\n\nTo keep things simple all components will be run using [Docker](https://www.docker.com). **Docker** is a container\ntechnology which allows to different components isolated into their respective environments.\n\n-   To install Docker on Windows follow the instructions [here](https://docs.docker.com/docker-for-windows/)\n-   To install Docker on Mac follow the instructions [here](https://docs.docker.com/docker-for-mac/)\n-   To install Docker on Linux follow the instructions [here](https://docs.docker.com/install/)\n\n**Docker Compose** is a tool for defining and running multi-container Docker applications. A series of\n[YAML files](https://raw.githubusercontent.com/Fiware/tutorials.Time-Series-Data/master/docker-compose.yml) are used to\nconfigure the required services for the application. This means all container services can be brought up in a single\ncommand. Docker Compose is installed by default as part of Docker for Windows and Docker for Mac, however Linux users\nwill need to follow the instructions found [here](https://docs.docker.com/compose/install/)\n\nYou can check your current **Docker** and **Docker Compose** versions using the following commands:\n\n```console\ndocker-compose -v\ndocker version\n```\n\nPlease ensure that you are using Docker version 18.03 or higher and Docker Compose 1.21 or higher and upgrade if\nnecessary.\n\n## Cygwin for Windows\n\nWe will start up our services using a simple Bash script. Windows users should download [cygwin](http://www.cygwin.com/)\nto provide a command-line functionality similar to a Linux distribution on Windows.\n\n# Start Up\n\nBefore you start, you should ensure that you have obtained or built the necessary Docker images locally. Please clone\nthe repository and create the necessary images by running the commands as shown:\n\n```console\ngit clone https://github.com/FIWARE/tutorials.Time-Series-Data.git\ncd tutorials.Time-Series-Data\ngit checkout NGSI-LD\n\n./services create\n```\n\nThereafter, all services can be initialized from the command-line by running the\n[services](https://github.com/FIWARE/tutorials.Time-Series-Data/blob/NGSI-v2/services) Bash script provided within the\nrepository:\n\n```console\n./services start\n```\n\n> :information_source: **Note:** If you want to clean up and start over again you can do so with the following command:\n>\n> ```console\n> ./services stop\n> ```\n\n# Connecting FIWARE to a CrateDB Database via QuantumLeap\n\nIn the configuration, **QuantumLeap** listens to NGSI LD notifications on port `8868` and persists historic context data\nto the **CrateDB**. **CrateDB** is accessible using port `4200` and can either be queried directly or attached to the\nGrafana analytics tool. The rest of the system providing the context data has been described in previous tutorials\n\n## CrateDB Database Server Configuration\n\n```yaml\ncrate-db:\n    image: crate:4.1.4\n    hostname: crate-db\n    ports:\n        - \"4200:4200\"\n        - \"4300:4300\"\n    command:\n        crate -Clicense.enterprise=false -Cauth.host_based.enabled=false  -Ccluster.name=democluster\n        -Chttp.cors.enabled=true -Chttp.cors.allow-origin=\"*\"\n    environment:\n        - CRATE_HEAP_SIZE=2g\n```\n\nIf CrateDB exits immediately with a\n`max virtual memory areas vm.max_map_filling [65530] is too low, increase to at least [262144]` error, this can be fixed\nby running the `sudo sysctl -w vm.max_map_filling=262144` command on the host machine. For further information look\nwithin the CrateDB\n[documentation](https://crate.io/docs/crate/howtos/en/latest/admin/bootstrap-checks.html#bootstrap-checks) and Docker\n[troubleshooting guide](https://crate.io/docs/crate/howtos/en/latest/deployment/containers/docker.html#troubleshooting)\n\n## QuantumLeap Configuration\n\n```yaml\nquantumleap:\n    image: smartsdk/quantumleap\n    hostname: quantumleap\n    ports:\n        - \"8668:8668\"\n    depends_on:\n        - crate-db\n    environment:\n        - CRATE_HOST=crate-db\n```\n\n## Grafana Configuration\n\n```yaml\ngrafana:\n    image: grafana/grafana\n    depends_on:\n        - cratedb\n    ports:\n        - \"3003:3000\"\n    environment:\n        - GF_INSTALL_PLUGINS=https://github.com/orchestracities/grafana-map-plugin/archive/master.zip;grafana-map-plugin,grafana-clock-panel,grafana-worldmap-panel\n```\n\nThe `quantumleap` container is listening on one port:\n\n-   The Operations for port for QuantumLeap - `8668` is where the service will be listening for notifications from the\n    Orion context broker and where users can query data from.\n\nThe `CRATE_HOST` environment variable defines the location where the data will be persisted.\n\nThe `cratedb` container is listening on two ports:\n\n-   The Admin UI is available on port `4200`\n-   The transport protocol is available on `port 4300`\n\nThe `grafana` container has connected up port `3000` internally with port `3003` externally. This is because the Grafana\nUI is usually available on port `3000`, but this port has already been taken by the dummy devices UI so it has been\nshifted to another port. The Grafana Environment variables are described within their own\n[documentation](https://grafana.com/docs/installation/configuration/). The configuration ensures we will be able to\nconnect to the **CrateDB** database later on in the tutorial. The configuration also imports a custom map plugin that\nhelps you in displaying NGSI v2 entities over a map.\n\n### Generating Context Data\n\nFor the purpose of this tutorial, we must be monitoring a system where the context is periodically being updated. The\ndummy IoT Sensors can be used to do this.\n\nDetails of various buildings around the farm can be found in the tutorial application. Open\n`http://localhost:3000/app/farm/urn:ngsi-ld:Building:farm001` to display a building with an associated filling sensor\nand thermostat.\n\n![](https://fiware.github.io/tutorials.Subscriptions/img/fmis.png)\n\nRemove some hay from the barn, update the thermostat and open the device monitor page at\n`http://localhost:3000/device/monitor` and start a **Tractor** and switch on a **Smart Lamp**. This can be done by\nselecting an appropriate command from the drop down list and pressing the `send` button. The stream of measurements\ncoming from the devices can then be seen on the same page.\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Setting up Subscriptions",
			"item": [
				{
					"name": "Orion - QuantumLeap - Aggregate Filling Sensor filling Events",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/ld+json"
							},
							{
								"key": "NGSILD-Tenant",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Notify me of all feedstock changes\",\n  \"type\": \"Subscription\",\n  \"entities\": [{\"type\": \"FillingSensor\"}],\n  \"watchedAttributes\": [\"filling\"],\n  \"notification\": {\n    \"attributes\": [\"filling\", \"location\"],\n    \"format\": \"normalized\",\n    \"endpoint\": {\n      \"uri\": \"http://quantumleap:8668/v2/notify\",\n      \"accept\": \"application/json\"\n    }\n  },\n   \"@context\": \"http://context-provider:3000/data-models/ngsi-context.jsonld\"\n}"
						},
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscriptions",
								""
							]
						},
						"description": "The rate of change of the **Filling Sensor** is driven by events in the real-world. We need to receive every event to be\nable to aggregate the results.\n\nThis is done by making a POST request to the `/ngsi-ld/v1/subscriptions/` endpoint of the **Orion-LD Context Broker**.\n\n-   The `NGSILD-Tenant` headers is used to filter the subscription to only listen to measurements from the attached IoT\n    Sensors\n-   The `entities` `type` in the request body ensures that **QuantumLeap** will be informed of all **FillingSensor**\n    data changes.\n-   The `notification` URL must match the exposed port.\n\nWith NGSI-LD the `observedAt` _property-of-property_ holds the timestamp of the measure. Because the attribute being\nmonitored contains this _property-of-property_, the `time_index` column within the **CrateDB** database will match the\ndata found within the **MongoDB** database used by the **Orion Context Broker** rather than using the creation time of\nthe record within the **CrateDB** itself."
					},
					"response": []
				},
				{
					"name": "Orion - QuantumLeap - Sample GPS Readings",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/ld+json"
							},
							{
								"key": "NGSILD-Tenant",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Notify me of animal locations\",\n  \"type\": \"Subscription\",\n  \"entities\": [{\"type\": \"Device\"}],\n  \"watchedAttributes\": [\"location\", \"status\", \"heartRate\"],\n  \"notification\": {\n    \"attributes\": [\"location\", \"status\", \"heartRate\"],\n    \"format\": \"normalized\",\n    \"endpoint\": {\n      \"uri\": \"http://quantumleap:8668/v2/notify\",\n      \"accept\": \"application/json\"\n    }\n  },\n   \"throttling\": 10,\n   \"@context\": \"http://context-provider:3000/data-models/ngsi-context.jsonld\"\n}"
						},
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscriptions",
								""
							]
						},
						"description": "The heart rate and GPS reading of the Animal Collars on the animals on the farm are constantly changing, we only need to\nsample the values to be able to work out relevant statistics such as minimum and maximum values and rates of change.\n\nThis is done by making a POST request to the `/ngsi-ld/v1/subscriptions/` endpoint of the **Orion Context Broker** and\nincluding the `throttling` attribute in the request body.\n\n-   The `NGSILD-Tenant` headers is used to filter the subscription to only listen to measurements from the attached IoT\n    Sensors\n-   The `entities` `type` in the request body ensures that **QuantumLeap** will be informed of all **Device** data\n    changes.\n-   The `notification` URL must match the exposed port.\n-   The `throttling` value defines the rate that changes are sampled."
					},
					"response": []
				},
				{
					"name": "Orion - Check Subscription is working",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "NGSILD-Tenant",
								"value": "openiot"
							},
							{
								"key": "fiware-servicepath",
								"value": "/"
							}
						],
						"url": {
							"raw": "http://{{orion}}/ngsi-ld/v1/subscriptions/",
							"protocol": "http",
							"host": [
								"{{orion}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"subscriptions",
								""
							]
						},
						"description": "Before anything, check the subscriptions you created in steps one and two are working (i.e., at least one\nnotification for each was sent)."
					},
					"response": []
				}
			],
			"description": "Once a dynamic context system is up and running, we need to inform **Quantum\nLeap** directly of changes in context. As expected this is done using the\nsubscription mechanism of the **Orion Context Broker**. The `attrsFormat=legacy`\nattribute is not required since **QuantumLeap** accepts NGSI v2 notifications\ndirectly.\n\nSubscriptions will be covered in the next subsections. More details about\nsubscriptions can be found in previous tutorials or in the\n[subscriptions section](https://quantumleap.readthedocs.io/en/latest/user/#orion-subscription)\nof QuantumLeap docs.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Time Series Data Queries (QuantumLeap API)",
			"item": [
				{
					"name": "QuantumLeap - Obtain version information",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{quantumleap}}/version",
							"protocol": "http",
							"host": [
								"{{quantumleap}}"
							],
							"path": [
								"version"
							]
						}
					},
					"response": []
				},
				{
					"name": "List the first N Sampled Values",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Fiware-Service",
								"value": "openiot",
								"type": "text"
							},
							{
								"key": "Fiware-ServicePath",
								"value": "/",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{quantumleap}}/v2/entities/urn:ngsi-ld:Device:filling001/attrs/filling?=3&limit=3",
							"protocol": "http",
							"host": [
								"{{quantumleap}}"
							],
							"path": [
								"v2",
								"entities",
								"urn:ngsi-ld:Device:filling001",
								"attrs",
								"filling"
							],
							"query": [
								{
									"key": "",
									"value": "3"
								},
								{
									"key": "limit",
									"value": "3"
								}
							]
						},
						"description": "This example shows the first 3 sampled `luminosity` values from `Lamp:001`. \n\nNote the use of `Fiware-Service` and `Fiware-ServicePath` headers. These are\nrequired only when data are pushed to orion using such headers (in multitenancy\nscenarios). Failing to align these headers will result in no data being\nreturned."
					},
					"response": []
				},
				{
					"name": "List N Sampled Values at an Offset",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Fiware-Service",
								"value": "openiot",
								"type": "text"
							},
							{
								"key": "Fiware-ServicePath",
								"value": "/",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{quantumleap}}/v2/entities/urn:ngsi-ld:Device:filling001/attrs/filling?offset=3&limit=3",
							"protocol": "http",
							"host": [
								"{{quantumleap}}"
							],
							"path": [
								"v2",
								"entities",
								"urn:ngsi-ld:Device:filling001",
								"attrs",
								"filling"
							],
							"query": [
								{
									"key": "offset",
									"value": "3"
								},
								{
									"key": "limit",
									"value": "3"
								}
							]
						},
						"description": "This example shows the fourth, fifth and sixth sampled count values from Motion:001.\n"
					},
					"response": []
				},
				{
					"name": "List the latest N Sampled Values",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Fiware-Service",
								"value": "openiot",
								"type": "text"
							},
							{
								"key": "Fiware-ServicePath",
								"value": "/",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{quantumleap}}/v2/entities/urn:ngsi-ld:Device:filling001/attrs/filling?lastN=3",
							"protocol": "http",
							"host": [
								"{{quantumleap}}"
							],
							"path": [
								"v2",
								"entities",
								"urn:ngsi-ld:Device:filling001",
								"attrs",
								"filling"
							],
							"query": [
								{
									"key": "lastN",
									"value": "3"
								}
							]
						},
						"description": "This example shows latest three sampled `count` values from `Motion:001`."
					},
					"response": []
				},
				{
					"name": "List the Sum of values over a time period",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Fiware-Service",
								"value": "openiot",
								"type": "text"
							},
							{
								"key": "Fiware-ServicePath",
								"value": "/",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{quantumleap}}/v2/entities/urn:ngsi-ld:Device:filling001/attrs/filling?aggrMethod=count&aggrPeriod=minute&lastN=3",
							"protocol": "http",
							"host": [
								"{{quantumleap}}"
							],
							"path": [
								"v2",
								"entities",
								"urn:ngsi-ld:Device:filling001",
								"attrs",
								"filling"
							],
							"query": [
								{
									"key": "aggrMethod",
									"value": "count"
								},
								{
									"key": "aggrPeriod",
									"value": "minute"
								},
								{
									"key": "lastN",
									"value": "3"
								}
							]
						},
						"description": "This example shows total `count` values from `Motion:001` over each minute.\n\nYou need QuantumLeap **version >= 0.4.1**. You can check your version with a\nsimple GET like:\n\n```\ncurl -X GET \\\n  'http://localhost:8668/v2/version' \\\n  -H 'Accept: application/json'\n```"
					},
					"response": []
				},
				{
					"name": "List the Minimum Values over a Time Period",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Fiware-Service",
								"value": "openiot",
								"type": "text"
							},
							{
								"key": "Fiware-ServicePath",
								"value": "/",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{quantumleap}}/v2/entities/urn:ngsi-ld:Device:filling001/attrs/filling?aggrMethod=min&aggrPeriod=minute&lastN=3",
							"protocol": "http",
							"host": [
								"{{quantumleap}}"
							],
							"path": [
								"v2",
								"entities",
								"urn:ngsi-ld:Device:filling001",
								"attrs",
								"filling"
							],
							"query": [
								{
									"key": "aggrMethod",
									"value": "min"
								},
								{
									"key": "aggrPeriod",
									"value": "minute"
								},
								{
									"key": "lastN",
									"value": "3"
								}
							]
						},
						"description": "This example shows minimum `luminosity` values from `Lamp:001` over each minute.\n\nYou need QuantumLeap **version >= 0.4.1**. You can check your version with a\nsimple GET like:\n\n```console\ncurl -X GET \\\n  'http://localhost:8668/v2/version' \\\n  -H 'Accept: application/json'\n```"
					},
					"response": []
				},
				{
					"name": "List the Maximum Values over a Time Period",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Fiware-Service",
								"value": "openiot",
								"type": "text"
							},
							{
								"key": "Fiware-ServicePath",
								"value": "/",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{quantumleap}}/v2/entities/urn:ngsi-ld:Device:filling001/attrs/filling?aggrMethod=max&aggrPeriod=minute&lastN=3",
							"protocol": "http",
							"host": [
								"{{quantumleap}}"
							],
							"path": [
								"v2",
								"entities",
								"urn:ngsi-ld:Device:filling001",
								"attrs",
								"filling"
							],
							"query": [
								{
									"key": "aggrMethod",
									"value": "max"
								},
								{
									"key": "aggrPeriod",
									"value": "minute"
								},
								{
									"key": "lastN",
									"value": "3"
								}
							]
						},
						"description": "This example shows maximum `luminosity` value of `Lamp:001` that occurred\nbetween from `2018-06-27T09:00:00` to `2018-06-30T23:59:59`.\n\nAlter the `fromDate` and `toDate` parameters to retrieve your current data"
					},
					"response": []
				},
				{
					"name": "List the latest N Sampled Values of Devices near a Point",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Fiware-Service",
								"type": "text",
								"value": "openiot"
							},
							{
								"key": "Fiware-ServicePath",
								"type": "text",
								"value": "/"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{quantumleap}}/v2/types/Device/attrs/heartRate?lastN=4&georel=near;maxDistance:5000&geometry=point&coords=52.518,13.357",
							"protocol": "http",
							"host": [
								"{{quantumleap}}"
							],
							"path": [
								"",
								"v2",
								"types",
								"Device",
								"attrs",
								"heartRate"
							],
							"query": [
								{
									"key": "lastN",
									"value": "4"
								},
								{
									"key": "georel",
									"value": "near;maxDistance:5000"
								},
								{
									"key": "geometry",
									"value": "point"
								},
								{
									"key": "coords",
									"value": "52.518,13.357"
								}
							]
						},
						"description": "This example shows the latest four sampled `luminosity` values of lamps that\nare within a 5 km radius from `52Â°33'16.9\"N 13Â°23'55.0\"E` (Bornholmer StraÃŸe\n65, Berlin, Germany). If you have turned on all the lamps available on the\ndevice monitor page, you should be able to see data for `Lamp:001` and\n`Lamp:004`.\n\n> **Note:** Geographical queries are only available\n> starting from version `0.5` of QuantumLeap which implements the full\n> set of queries detailed in the Geographical Queries section of the\n> [NGSI v2 specification](http://fiware.github.io/specifications/ngsiv2/stable/)."
					},
					"response": []
				},
				{
					"name": "List the latest N Sampled Values of Devices in an Area",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Fiware-Service",
								"type": "text",
								"value": "openiot"
							},
							{
								"key": "Fiware-ServicePath",
								"type": "text",
								"value": "/"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{quantumleap}}/v2/types/Device/attrs/heartRate?lastN=4&georel=coveredBy&geometry=polygon&coords=52.5537,13.3996;52.5557,13.3996;52.5557,13.3976;52.5537,13.3976;52.5537,13.3996",
							"protocol": "http",
							"host": [
								"{{quantumleap}}"
							],
							"path": [
								"v2",
								"types",
								"Device",
								"attrs",
								"heartRate"
							],
							"query": [
								{
									"key": "lastN",
									"value": "4"
								},
								{
									"key": "georel",
									"value": "coveredBy"
								},
								{
									"key": "geometry",
									"value": "polygon"
								},
								{
									"key": "coords",
									"value": "52.5537,13.3996;52.5557,13.3996;52.5557,13.3976;52.5537,13.3976;52.5537,13.3996"
								}
							]
						},
						"description": "This example shows the latest four sampled `luminosity` values of lamps that\nare inside a square of side 200 m centred at `52Â°33'16.9\"N 13Â°23'55.0\"E`\n(Bornholmer StraÃŸe 65, Berlin, Germany). Even if you have turned on all the\nlamps available on the device monitor page, you should only see data for\n`Lamp:001`.\n\n> **Note:** Geographical queries are only available\n> starting from version `0.5` of QuantumLeap which implements the full\n> set of queries detailed in the Geographical Queries section of the\n> [NGSI v2 specification](http://fiware.github.io/specifications/ngsiv2/stable/)."
					},
					"response": []
				}
			],
			"description": "**CrateDB** offers an\n[HTTP Endpoint](https://crate.io/docs/crate/reference/en/latest/interfaces/http.html)\nthat can be used to submit SQL queries. The endpoint is accessible under\n`<servername:port>/_sql`.\n\nSQL statements are sent as the body of POST requests in JSON format, where the\nSQL statement is the value of the `stmt` attribute.\n\n> When to query **CrateDB** and when **QuantumLeap**?. As a rule of thumb,\n> prefer working always with **QuantumLeap** for the following reasons:\n>\n> -   Your experience will be closer to FIWARE NGSI APIs like Orion's.\n> -   Your application will not be tied to CrateDB's specifics nor QuantumLeap's\n>     implementation details, which could change and break your app.\n> -   QuantumLeap can be easily extended to other backends and your app will get\n>     compatibility for free.\n> -   If your deployment is distributed, you won't need to expose the ports of\n>     your database to the outside.\n\nIf your are sure your query is not supported by **QuantumLeap**, you may have to\nend up querying **CrateDB**, however, please open an issue in\n[QuantumLeap's repo](https://github.com/smartsdk/ngsi-timeseries-api/issues) so\nthe team is aware.\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Time Series Data Queries (Crate-DB)",
			"item": [
				{
					"name": "Read Schemas",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"stmt\":\"SHOW SCHEMAS\"}"
						},
						"url": {
							"raw": "http://{{crate}}/_sql",
							"protocol": "http",
							"host": [
								"{{crate}}"
							],
							"path": [
								"_sql"
							]
						},
						"description": "Another way to see if data are being persisted is to check if a `table_schema`\nhas been created. This can be done by making a request to the **CrateDB** HTTP\nendpoint as shown below.\n\nSchema names are formed with the `mt` prefix followed by `fiware-service` header\nin lower case. The IoT Agent is forwarding measurements from the dummy IoT\ndevices, with the `FIWARE-Service` header `openiot`. These are being persisted\nunder the `mtopeniot` schema.\n\nIf the `mtopeniot` does not exist, then the subscription to **QuantumLeap** has\nnot been set up correctly. Check that the subscription exists, and has been\nconfigured to send data to the correct location."
					},
					"response": []
				},
				{
					"name": "Read Tables",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"stmt\":\"SHOW TABLES\"}"
						},
						"url": {
							"raw": "http://{{crate}}/_sql",
							"protocol": "http",
							"host": [
								"{{crate}}"
							],
							"path": [
								"_sql"
							]
						},
						"description": "**Quantum Leap** will persist data into separate tables within the Crate-DB database based on the entity type. Table names are formed with the `et` prefix and the entity type name in lowercase.\n\nThe response shows that both **Motion Sensor** data and **Smart Lamp** data are being persisted in the database."
					},
					"response": []
				},
				{
					"name": "List the first N Sampled Values",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"stmt\":\"SELECT * FROM mtopeniot.etfillingsensor WHERE entity_id = 'urn:ngsi-ld:Device:filling001'  ORDER BY time_index ASC LIMIT 3\"}"
						},
						"url": {
							"raw": "http://{{crate}}/_sql",
							"protocol": "http",
							"host": [
								"{{crate}}"
							],
							"path": [
								"_sql"
							]
						},
						"description": "This example shows the first 3 sampled `luminosity` values from `Lamp:001`. \n\nThe SQL statement uses `ORDER BY` and `LIMIT` clauses to sort the data. More details can be found under within the Crate-DB [documentation](https://crate.io/docs/crate/reference/en/latest/sql/statements/select.html)"
					},
					"response": []
				},
				{
					"name": "List N Sampled Values at an Offset",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"stmt\":\"SELECT * FROM mtopeniot.etmotion WHERE entity_id = 'Motion:001' ORDER BY time_index ASC  LIMIT 3 OFFSET 3\"}"
						},
						"url": {
							"raw": "http://{{crate}}/_sql",
							"protocol": "http",
							"host": [
								"{{crate}}"
							],
							"path": [
								"_sql"
							]
						},
						"description": "This example shows the fourth, fifth and sixth sampled count values from Motion:001.\n\nThe SQL statement uses an `OFFSET` clause to retrieve the required rows. \nMore details can be found under within the Crate-DB [documentation](https://crate.io/docs/crate/reference/en/latest/sql/statements/select.html)"
					},
					"response": []
				},
				{
					"name": "List the latest N Sampled Values",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"stmt\":\"SELECT * FROM mtopeniot.etmotion WHERE entity_id = 'Motion:001'  ORDER BY time_index DESC LIMIT 3\"}"
						},
						"url": {
							"raw": "http://{{crate}}/_sql",
							"protocol": "http",
							"host": [
								"{{crate}}"
							],
							"path": [
								"_sql"
							]
						},
						"description": "This example shows latest three sampled `count` values from `Motion:001`. \n\nThe SQL statement uses an `ORDER BY ... DESC` clause combined with a `LIMIT` clause to retrieve \nthe last N rows. More details can be found under within the Crate-DB [documentation](https://crate.io/docs/crate/reference/en/latest/sql/statements/select.html)"
					},
					"response": []
				},
				{
					"name": "List the Sum of values over a time period",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"stmt\":\"SELECT DATE_FORMAT (DATE_TRUNC ('minute', time_index)) AS minute, SUM (count) AS sum FROM mtopeniot.etmotion WHERE entity_id = 'Motion:001' GROUP BY minute ORDER BY minute\"}"
						},
						"url": {
							"raw": "http://{{crate}}/_sql",
							"protocol": "http",
							"host": [
								"{{crate}}"
							],
							"path": [
								"_sql"
							]
						},
						"description": "This example shows total `count` values from `Motion:001` over each minute.\n\nThe SQL statement uses a `SUM` function and `GROUP BY` clause to retrieve the relevant data.\nCrate-DB offers a range of [Date-Time Function](https://crate.io/docs/crate/reference/en/latest/general/builtins/scalar.html#date-and-time-functions) to truncate and convert the timestamps into data which can be grouped."
					},
					"response": []
				},
				{
					"name": "List the Minimum Values over a Time Period",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"stmt\":\"SELECT DATE_FORMAT (DATE_TRUNC ('minute', time_index)) AS minute, MIN (luminosity) AS min FROM mtopeniot.etlamp WHERE entity_id = 'Lamp:001' GROUP BY minute ORDER BY minute\"}"
						},
						"url": {
							"raw": "http://{{crate}}/_sql",
							"protocol": "http",
							"host": [
								"{{crate}}"
							],
							"path": [
								"_sql"
							]
						},
						"description": "This example shows minimum `luminosity` values from `Lamp:001` over each minute.\n\nThe SQL statement uses a `MIN` function and `GROUP BY` clause to retrieve the relevant data.\nCrate-DB offers a range of [Date-Time Function](https://crate.io/docs/crate/reference/en/latest/general/builtins/scalar.html#date-and-time-functions) to truncate and convert the timestamps into data which can be grouped."
					},
					"response": []
				},
				{
					"name": "List the Maximum Values over a Time Period",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"stmt\":\"SELECT DATE_FORMAT (DATE_TRUNC ('minute', time_index)) AS minute, MAX (filling) AS max FROM mtopeniot.etfillingsensor WHERE entity_id = 'urn:ngsi-ld:Device:filling001' GROUP BY minute ORDER BY minute\"}"
						},
						"url": {
							"raw": "http://{{crate}}/_sql",
							"protocol": "http",
							"host": [
								"{{crate}}"
							],
							"path": [
								"_sql"
							]
						},
						"description": "This example shows maximum `luminosity` values from `Lamp:001` over each minute.\n\nThe SQL statement uses a `MAX` function and `GROUP BY` clause to retrieve the relevant data.\nCrate-DB offers a range of [Date-Time Function](https://crate.io/docs/crate/reference/en/latest/general/builtins/scalar.html#date-and-time-functions) to truncate and convert the timestamps into data which can be grouped."
					},
					"response": []
				},
				{
					"name": "List the Average Values over a Time Period",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"stmt\":\"SELECT DATE_FORMAT (DATE_TRUNC ('minute', time_index)) AS minute, AVG (filling) AS average FROM mtopeniot.etfillingsensor WHERE entity_id = 'urn:ngsi-ld:Device:filling001' GROUP BY minute ORDER BY minute\"}"
						},
						"url": {
							"raw": "http://{{crate}}/_sql",
							"protocol": "http",
							"host": [
								"{{crate}}"
							],
							"path": [
								"_sql"
							]
						},
						"description": "This example shows the average of `luminosity` values from `Lamp:001` over each minute.\n\nThe SQL statement uses a `AVG` function and `GROUP BY` clause to retrieve the relevant data.\nCrate-DB offers a range of [Date-Time Function](https://crate.io/docs/crate/reference/en/latest/general/builtins/scalar.html#date-and-time-functions) to truncate and convert the timestamps into data which can be grouped."
					},
					"response": []
				}
			],
			"description": "**Crate-DB** offers an [HTTP Endpoint](https://crate.io/docs/crate/reference/en/latest/interfaces/http.html) that can be used to submit SQL queries. The endpoint is accessible under `<servername:port>/_sql`.\n\nSQL statements are sent as the body of POST requests in JSON format, where the SQL statement is the value of the `stmt` attribute.\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "orion",
			"value": "localhost:1026"
		},
		{
			"key": "quantumleap",
			"value": "localhost:8668"
		},
		{
			"key": "crate",
			"value": "localhost:4200"
		}
	]
}